!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("rxjs"),require("rxjs/operators")):"function"==typeof define&&define.amd?define(["rxjs","rxjs/operators"],e):"object"==typeof exports?exports.rxidb=e(require("rxjs"),require("rxjs/operators")):t.rxidb=e(t.rxjs,t["rxjs/operators"])}(window,function(t,e){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=5)}([function(e,r){e.exports=t},function(t,r){t.exports=e},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),o=r(1),i=r(6),u=function(){function t(t,e){this.name=t,this._db=e,this._update$=new n.Subject,this.update$=this._update$.asObservable(),this._dataUpdate$=new n.Subject,this.data$=n.merge(this.getAll(),this._dataUpdate$).pipe(o.shareReplay(1))}return t.prototype.clear=function(){var t=this;return this.tx("readwrite").pipe(o.map(function(e){return e.objectStore(t.name)}),o.map(function(t){return t.clear()}),o.switchMap(function(t){return i.rxifyRequest(t)}),o.switchMap(function(e){return t._refreshDataStream().pipe(o.mapTo(e))}),o.take(1),o.mapTo(void 0))},t.prototype.cursor=function(t,e,r){var n=this;return void 0===t&&(t="readonly"),this.tx(t).pipe(o.map(function(t){return t.objectStore(n.name)}),o.map(function(t){return t.openCursor(e,r)}),o.switchMap(function(t){return i.rxifyRequest(t)}),i.resultFromIDBEvent)},t.prototype.delete=function(t){var e=this;return this.tx("readwrite").pipe(o.map(function(t){return t.objectStore(e.name)}),o.map(function(e){return e.delete(t)}),o.switchMap(function(t){return i.rxifyRequest(t)}),o.switchMap(function(t){return e._refreshDataStream().pipe(o.mapTo(t))}),o.take(1),o.mapTo(void 0))},t.prototype.reset=function(t){var e=this;return this.tx("readwrite").pipe(o.map(function(t){return t.objectStore(e.name)}),o.switchMap(function(t){return i.rxifyRequest(t.clear()).pipe(o.take(1),o.mapTo(t))}),o.map(function(e){return t.map(function(t){return i.rxifyRequest(e.put(t)).pipe(o.take(1),i.resultFromIDBEvent)})}),o.switchMap(function(t){return n.forkJoin(t)}),o.switchMap(function(t){return e._refreshDataStream().pipe(o.mapTo(t))}),o.take(1))},t.prototype.get=function(t){var e=this;return this.tx().pipe(o.map(function(t){return t.objectStore(e.name)}),o.map(function(e){return e.get(t)}),o.switchMap(function(t){return i.rxifyRequest(t)}),i.resultFromIDBEvent)},t.prototype.getAll=function(){var t=this.cursor(),e=new n.Subject;return t.pipe(o.tap(function(t){return t?t.continue():e.next()}),o.filter(function(t){return!!t}),o.map(function(t){return t.value}),o.bufferWhen(function(){return e}),o.take(1))},t.prototype.set=function(t,e){var r=this;return this.tx("readwrite").pipe(o.map(function(t){return t.objectStore(r.name)}),o.map(function(r){return r.put(t,e)}),o.switchMap(function(t){return i.rxifyRequest(t)}),i.resultFromIDBEvent,o.switchMap(function(t){return r._refreshDataStream().pipe(o.mapTo(t))}))},t.prototype.tx=function(t){return void 0===t&&(t="readonly"),this._db.tx(this.name,t)},t.prototype._refreshDataStream=function(){var t=this;return this.getAll().pipe(o.tap(function(e){return t._dataUpdate$.next(e)}))},t}();e.RxIDBStore=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),o=r(1),i=r(2),u=function(){function t(t){this.idb=t,this._storeCache={}}return t.prototype.close=function(){this.idb.close()},t.prototype.get=function(t){return this._storeCache[t]?this._storeCache[t]:this._storeCache[t]=new i.RxIDBStore(t,this)},t.prototype.tx=function(t,e){var r=this;return void 0===e&&(e="readonly"),n.of(null).pipe(o.map(function(){return r.idb.transaction(t,e)}))},t.prototype.transaction=function(t,e){return void 0===e&&(e="readonly"),this.idb.transaction(t,e)},t}();e.RxIDB=u},function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=function(e,r){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])})(e,r)};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(e,r,n){var o=t.call(this,e,r)||this;return o._store=n,o}return n(e,t),e.prototype.createIndex=function(t,e,r){return this._store.createIndex(t,e,r)},e.prototype.fill=function(t){var e=this;return Array.from(t).forEach(function(t){return e._store.put(t)}),this},e}(r(2).RxIDBStore);e.RxIDBUpgradeStore=o;var i=function(){function t(t,e){this._rxidb=t,this.db=e.target.result,this.oldVersion=e.oldVersion,this.version=e.newVersion}return t.prototype.create=function(t,e){var r=this.db.createObjectStore(t,e);return new o(t,this._rxidb,r)},t.prototype.delete=function(t){this.db.deleteObjectStore(t)},t.prototype.has=function(t){return this.db.objectStoreNames.contains(t)},t}();e.RxIDBUpgrade=i},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(3)),n(r(2)),n(r(4));var o=r(7);e.openDB=o.openDB,e.dropDB=o.dropDB},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),o=r(1);e.rxifyRequest=function(t){var e=new n.Subject;return t.onerror=function(t){return e.error(t)},t.onsuccess=function(t){return e.next(t)},e},e.resultFromIDBEvent=function(t){return t.pipe(o.map(function(t){return t.target.result}))}},function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],r=0;return e?e.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}},o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(e,"__esModule",{value:!0});var i=r(0),u=r(1),a=r(3),c=r(4);function p(t,e,r){var n,o=new i.Subject,p=new i.Subject,f=indexedDB.open(t,e);return f.onerror=function(t){return o.error(t)},f.onblocked=function(t){return o.error(t)},f.onsuccess=function(t){n=n||new a.RxIDB(t.target.result),o.next(n),o.complete(),e===n.idb.version&&(p.next(),p.complete())},f.onupgradeneeded=function(t){n=n||new a.RxIDB(t.target.result),s(new c.RxIDBUpgrade(n,t),r).subscribe(function(){return p.next()},function(t){return p.error(t)},function(){return p.complete()})},i.forkJoin([o,p]).pipe(u.map(function(){return n}))}function s(t,e){return e&&e.length?i.forkJoin(e.map(function(e){return f(t,e)})):i.of(null)}function f(t,e){var r,u;void 0===e&&(e=new Map);var a=t.oldVersion,c=[i.of(!0)];try{for(var p=n(e),s=p.next();!s.done;s=p.next()){var f=o(s.value,2),l=f[0],d=f[1];if(a<l){var h=d(t);h instanceof i.Observable&&c.push(h)}}}catch(t){r={error:t}}finally{try{s&&!s.done&&(u=p.return)&&u.call(p)}finally{if(r)throw r.error}}return c}function l(t){return i.Observable.create(function(e){var r=indexedDB.deleteDatabase(t);r.onblocked=function(t){return e.error(t)},r.onsuccess=function(){return e.next(void 0)},r.onerror=function(t){return e.error(t)}}).pipe(u.take(1))}e.openDB=p,e.onUpgradeEnded=s,e.setupLayers=f,e.dropDB=l,e.rxidb={openDB:p,dropDB:l}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yeGlkYi93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vcnhpZGIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcnhpZGIvZXh0ZXJuYWwgXCJyeGpzXCIiLCJ3ZWJwYWNrOi8vcnhpZGIvZXh0ZXJuYWwgXCJyeGpzL29wZXJhdG9yc1wiIiwid2VicGFjazovL3J4aWRiLy4vc3JjL3J4aWRiLXN0b3JlLnRzIiwid2VicGFjazovL3J4aWRiLy4vc3JjL3J4aWRiLWRiLnRzIiwid2VicGFjazovL3J4aWRiLy4vc3JjL3J4aWRiLXVwZ3JhZGUudHMiLCJ3ZWJwYWNrOi8vcnhpZGIvLi9yeGlkYi50cyIsIndlYnBhY2s6Ly9yeGlkYi8uL3NyYy9yeGlkYi11dGlscy50cyIsIndlYnBhY2s6Ly9yeGlkYi8uL3NyYy9yeGlkYi1zdGF0aWMudHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyeGpzXzEiLCJvcGVyYXRvcnNfMSIsInJ4aWRiX3V0aWxzXzEiLCJSeElEQlN0b3JlIiwiX2RiIiwidGhpcyIsIl91cGRhdGUkIiwiU3ViamVjdCIsInVwZGF0ZSQiLCJhc09ic2VydmFibGUiLCJfZGF0YVVwZGF0ZSQiLCJkYXRhJCIsIm1lcmdlIiwiZ2V0QWxsIiwicGlwZSIsInNoYXJlUmVwbGF5IiwiY2xlYXIiLCJfdGhpcyIsInR4IiwibWFwIiwib2JqZWN0U3RvcmUiLCJzdG9yZSIsInN3aXRjaE1hcCIsInJlcSIsInJ4aWZ5UmVxdWVzdCIsInJlc3VsdCIsIl9yZWZyZXNoRGF0YVN0cmVhbSIsIm1hcFRvIiwidGFrZSIsInVuZGVmaW5lZCIsImN1cnNvciIsInJhbmdlIiwiZGlyZWN0aW9uIiwib3BlbkN1cnNvciIsInJlc3VsdEZyb21JREJFdmVudCIsImRlbGV0ZSIsInJlc2V0IiwiY29sbGVjdGlvbiIsInB1dCIsInRhc2tzIiwiZm9ya0pvaW4iLCJjdXJzb3IkIiwiZG9uZSQiLCJ0YXAiLCJjb250aW51ZSIsIm5leHQiLCJmaWx0ZXIiLCJidWZmZXJXaGVuIiwic2V0IiwiZGF0YSIsInJ4aWRiX3N0b3JlXzEiLCJSeElEQiIsImlkYiIsIl9zdG9yZUNhY2hlIiwiY2xvc2UiLCJvZiIsInRyYW5zYWN0aW9uIiwiUnhJREJVcGdyYWRlU3RvcmUiLCJfc3VwZXIiLCJfbmFtZSIsIl9yeGlkYiIsIl9zdG9yZSIsIl9fZXh0ZW5kcyIsImNyZWF0ZUluZGV4Iiwia2V5cGF0aCIsInBhcmFtcyIsImZpbGwiLCJlbnRyaWVzIiwiQXJyYXkiLCJmcm9tIiwiZm9yRWFjaCIsImVudHJ5IiwiUnhJREJVcGdyYWRlIiwiX2V2ZW50IiwiZGIiLCJ0YXJnZXQiLCJvbGRWZXJzaW9uIiwidmVyc2lvbiIsIm5ld1ZlcnNpb24iLCJvcHRpb25zIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJkZWxldGVPYmplY3RTdG9yZSIsImhhcyIsIm9iamVjdFN0b3JlTmFtZXMiLCJjb250YWlucyIsIl9fZXhwb3J0IiwicnhpZGJfc3RhdGljXzEiLCJvcGVuREIiLCJkcm9wREIiLCJyZXF1ZXN0IiwicmVxdWVzdCQiLCJvbmVycm9yIiwiZSIsImVycm9yIiwib25zdWNjZXNzIiwic291cmNlIiwicnhpZGJfZGJfMSIsInJ4aWRiX3VwZ3JhZGVfMSIsImRiTmFtZSIsImRiVmVyc2lvbiIsInN0b3JlcyIsInJ4SURCIiwiZGIkIiwidXBncmFkZSQiLCJpbmRleGVkREIiLCJvcGVuIiwib25ibG9ja2VkIiwiZXZlbnQiLCJjb21wbGV0ZSIsIm9udXBncmFkZW5lZWRlZCIsIm9uVXBncmFkZUVuZGVkIiwic3Vic2NyaWJlIiwicnhJREJVcGdyYWRlIiwibGVuZ3RoIiwibGF5ZXJzIiwic2V0dXBMYXllcnMiLCJNYXAiLCJvYnNlcnZhYmxlcyIsImxheWVyc18xIiwiX192YWx1ZXMiLCJsYXllcnNfMV8xIiwiZG9uZSIsIl9iIiwiX19yZWFkIiwibGF5ZXJWZXJzaW9uIiwibGF5ZXJJbnN0YWxsZXIiLCJPYnNlcnZhYmxlIiwicHVzaCIsIm9ic2VydmVyIiwiZGVsZXRlRGF0YWJhc2UiLCJyeGlkYiJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBQUEsRUFBQUMsR0FDQSxpQkFBQUMsU0FBQSxpQkFBQUMsT0FDQUEsT0FBQUQsUUFBQUQsRUFBQUcsUUFBQSxRQUFBQSxRQUFBLG1CQUNBLG1CQUFBQyxlQUFBQyxJQUNBRCxRQUFBLHlCQUFBSixHQUNBLGlCQUFBQyxRQUNBQSxRQUFBLE1BQUFELEVBQUFHLFFBQUEsUUFBQUEsUUFBQSxtQkFFQUosRUFBQSxNQUFBQyxFQUFBRCxFQUFBLEtBQUFBLEVBQUEsbUJBUkEsQ0FTQ08sT0FBQSxTQUFBQyxFQUFBQyxHQUNELG1CQ1RBLElBQUFDLEtBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFWLFFBR0EsSUFBQUMsRUFBQU8sRUFBQUUsSUFDQUMsRUFBQUQsRUFDQUUsR0FBQSxFQUNBWixZQVVBLE9BTkFhLEVBQUFILEdBQUFJLEtBQUFiLEVBQUFELFFBQUFDLElBQUFELFFBQUFTLEdBR0FSLEVBQUFXLEdBQUEsRUFHQVgsRUFBQUQsUUEwREEsT0FyREFTLEVBQUFNLEVBQUFGLEVBR0FKLEVBQUFPLEVBQUFSLEVBR0FDLEVBQUFRLEVBQUEsU0FBQWpCLEVBQUFrQixFQUFBQyxHQUNBVixFQUFBVyxFQUFBcEIsRUFBQWtCLElBQ0FHLE9BQUFDLGVBQUF0QixFQUFBa0IsR0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNWLEVBQUFnQixFQUFBLFNBQUF6QixHQUNBLG9CQUFBMEIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQXRCLEVBQUEwQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQXRCLEVBQUEsY0FBaUQ0QixPQUFBLEtBUWpEbkIsRUFBQW9CLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFuQixFQUFBbUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZBeEIsRUFBQWdCLEVBQUFPLEdBQ0FYLE9BQUFDLGVBQUFVLEVBQUEsV0FBeUNULFlBQUEsRUFBQUssVUFDekMsRUFBQUUsR0FBQSxpQkFBQUYsRUFBQSxRQUFBTSxLQUFBTixFQUFBbkIsRUFBQVEsRUFBQWUsRUFBQUUsRUFBQSxTQUFBQSxHQUFnSCxPQUFBTixFQUFBTSxJQUFxQkMsS0FBQSxLQUFBRCxJQUNySSxPQUFBRixHQUlBdkIsRUFBQTJCLEVBQUEsU0FBQW5DLEdBQ0EsSUFBQWtCLEVBQUFsQixLQUFBOEIsV0FDQSxXQUEyQixPQUFBOUIsRUFBQSxTQUMzQixXQUFpQyxPQUFBQSxHQUVqQyxPQURBUSxFQUFBUSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFWLEVBQUFXLEVBQUEsU0FBQWlCLEVBQUFDLEdBQXNELE9BQUFqQixPQUFBa0IsVUFBQUMsZUFBQTFCLEtBQUF1QixFQUFBQyxJQUd0RDdCLEVBQUFnQyxFQUFBLEdBSUFoQyxJQUFBaUMsRUFBQSxtQkNsRkF6QyxFQUFBRCxRQUFBTSxpQkNBQUwsRUFBQUQsUUFBQU8saUZDQUEsSUFBQW9DLEVBQUFsQyxFQUFBLEdBQ0FtQyxFQUFBbkMsRUFBQSxHQUlBb0MsRUFBQXBDLEVBQUEsR0FJQXFDLEVBQUEsV0FZRSxTQUFBQSxFQUNTNUIsRUFDQzZCLEdBRERDLEtBQUE5QixPQUNDOEIsS0FBQUQsTUFiRkMsS0FBQUMsU0FBMEIsSUFBSU4sRUFBQU8sUUFDL0JGLEtBQUFHLFFBQTJCSCxLQUFLQyxTQUFTRyxlQUV4Q0osS0FBQUssYUFBaUMsSUFBSVYsRUFBQU8sUUFDdENGLEtBQUFNLE1BQTZCWCxFQUFBWSxNQUNsQ1AsS0FBS1EsU0FDTFIsS0FBS0ssY0FDTEksS0FDQWIsRUFBQWMsWUFBWSxJQXlIaEIsT0FqSFNaLEVBQUFQLFVBQUFvQixNQUFQLGVBQUFDLEVBQUFaLEtBQ0UsT0FBT0EsS0FBS2EsR0FBRyxhQUFhSixLQUMxQmIsRUFBQWtCLElBQUksU0FBQ0QsR0FBTyxPQUFBQSxFQUFHRSxZQUFZSCxFQUFLMUMsUUFDaEMwQixFQUFBa0IsSUFBSSxTQUFDRSxHQUFVLE9BQUFBLEVBQU1MLFVBQ3JCZixFQUFBcUIsVUFBVSxTQUFBQyxHQUFPLE9BQUFyQixFQUFBc0IsYUFBYUQsS0FDOUJ0QixFQUFBcUIsVUFBVSxTQUFBRyxHQUNSLE9BQU9SLEVBQUtTLHFCQUFxQlosS0FDL0JiLEVBQUEwQixNQUFNRixNQUdWeEIsRUFBQTJCLEtBQUssR0FDTDNCLEVBQUEwQixXQUFNRSxLQUlIMUIsRUFBQVAsVUFBQWtDLE9BQVAsU0FDRTNDLEVBQ0E0QyxFQUNBQyxHQUhGLElBQUFmLEVBQUFaLEtBS0UsWUFKQSxJQUFBbEIsTUFBQSxZQUlPa0IsS0FBS2EsR0FBRy9CLEdBQU0yQixLQUNuQmIsRUFBQWtCLElBQUksU0FBQUQsR0FBTSxPQUFBQSxFQUFHRSxZQUFZSCxFQUFLMUMsUUFDOUIwQixFQUFBa0IsSUFBSSxTQUFBRSxHQUFTLE9BQUFBLEVBQU1ZLFdBQVdGLEVBQU9DLEtBQ3JDL0IsRUFBQXFCLFVBQVUsU0FBQUMsR0FBTyxPQUFBckIsRUFBQXNCLGFBQWFELEtBQzlCckIsRUFBQWdDLHFCQUlHL0IsRUFBQVAsVUFBQXVDLE9BQVAsU0FBYzVDLEdBQWQsSUFBQTBCLEVBQUFaLEtBQ0UsT0FBT0EsS0FBS2EsR0FBRyxhQUFhSixLQUMxQmIsRUFBQWtCLElBQUksU0FBQ0QsR0FBTyxPQUFBQSxFQUFHRSxZQUFZSCxFQUFLMUMsUUFDaEMwQixFQUFBa0IsSUFBSSxTQUFDRSxHQUFVLE9BQUFBLEVBQU1jLE9BQU81QyxLQUM1QlUsRUFBQXFCLFVBQVUsU0FBQUMsR0FBTyxPQUFBckIsRUFBQXNCLGFBQWFELEtBQzlCdEIsRUFBQXFCLFVBQVUsU0FBQUcsR0FDUixPQUFPUixFQUFLUyxxQkFBcUJaLEtBQy9CYixFQUFBMEIsTUFBTUYsTUFHVnhCLEVBQUEyQixLQUFLLEdBQ0wzQixFQUFBMEIsV0FBTUUsS0FJSDFCLEVBQUFQLFVBQUF3QyxNQUFQLFNBQWFDLEdBQWIsSUFBQXBCLEVBQUFaLEtBQ0UsT0FBT0EsS0FBS2EsR0FBRyxhQUFhSixLQUMxQmIsRUFBQWtCLElBQUksU0FBQ0QsR0FBTyxPQUFBQSxFQUFHRSxZQUFZSCxFQUFLMUMsUUFDaEMwQixFQUFBcUIsVUFBVSxTQUFBRCxHQUFTLE9BQUFuQixFQUFBc0IsYUFBYUgsRUFBTUwsU0FBU0YsS0FBS2IsRUFBQTJCLEtBQUssR0FBSTNCLEVBQUEwQixNQUFNTixNQUNuRXBCLEVBQUFrQixJQUFJLFNBQUFFLEdBQ0YsT0FBT2dCLEVBQVdsQixJQUFJLFNBQUFsQyxHQUNwQixPQUFPaUIsRUFBQXNCLGFBQWFILEVBQU1pQixJQUFJckQsSUFBUTZCLEtBQ3BDYixFQUFBMkIsS0FBSyxHQUNMMUIsRUFBQWdDLHdCQUlOakMsRUFBQXFCLFVBQVUsU0FBQ2lCLEdBQTZCLE9BQUF2QyxFQUFBd0MsU0FBU0QsS0FDakR0QyxFQUFBcUIsVUFBVSxTQUFBRyxHQUNSLE9BQU9SLEVBQUtTLHFCQUFxQlosS0FDL0JiLEVBQUEwQixNQUFNRixNQUdWeEIsRUFBQTJCLEtBQUssS0FJRnpCLEVBQUFQLFVBQUFmLElBQVAsU0FBV1UsR0FBWCxJQUFBMEIsRUFBQVosS0FDRSxPQUFPQSxLQUFLYSxLQUFLSixLQUNmYixFQUFBa0IsSUFBSSxTQUFDRCxHQUFPLE9BQUFBLEVBQUdFLFlBQVlILEVBQUsxQyxRQUNoQzBCLEVBQUFrQixJQUFJLFNBQUFFLEdBQVMsT0FBQUEsRUFBTXhDLElBQUlVLEtBQ3ZCVSxFQUFBcUIsVUFBVSxTQUFBQyxHQUFPLE9BQUFyQixFQUFBc0IsYUFBYUQsS0FDOUJyQixFQUFBZ0MscUJBSUcvQixFQUFBUCxVQUFBaUIsT0FBUCxXQUNFLElBQUk0QixFQUFVcEMsS0FBS3lCLFNBQ2ZZLEVBQVUsSUFBSTFDLEVBQUFPLFFBRWxCLE9BQU9rQyxFQUFRM0IsS0FDYmIsRUFBQTBDLElBQUksU0FBQWIsR0FBVSxPQUFFQSxFQUFTQSxFQUFPYyxXQUFhRixFQUFNRyxTQUNuRDVDLEVBQUE2QyxPQUFPLFNBQUFoQixHQUFVLFFBQUVBLElBQ25CN0IsRUFBQWtCLElBQUksU0FBQVcsR0FBVSxPQUFBQSxFQUFPN0MsUUFDckJnQixFQUFBOEMsV0FBVyxXQUFNLE9BQUFMLElBQ2pCekMsRUFBQTJCLEtBQUssS0FJRnpCLEVBQUFQLFVBQUFvRCxJQUFQLFNBQVcvRCxFQUFZTSxHQUF2QixJQUFBMEIsRUFBQVosS0FDRSxPQUFPQSxLQUFLYSxHQUFHLGFBQWFKLEtBQzFCYixFQUFBa0IsSUFBSSxTQUFDRCxHQUFPLE9BQUFBLEVBQUdFLFlBQVlILEVBQUsxQyxRQUNoQzBCLEVBQUFrQixJQUFJLFNBQUFFLEdBQVMsT0FBQUEsRUFBTWlCLElBQUlyRCxFQUFPTSxLQUM5QlUsRUFBQXFCLFVBQVUsU0FBQUMsR0FBTyxPQUFBckIsRUFBQXNCLGFBQWFELEtBQzlCckIsRUFBQWdDLG1CQUNBakMsRUFBQXFCLFVBQVUsU0FBQUcsR0FDUixPQUFPUixFQUFLUyxxQkFBcUJaLEtBQy9CYixFQUFBMEIsTUFBTUYsUUFNUHRCLEVBQUFQLFVBQUFzQixHQUFQLFNBQVUvQixHQUNSLFlBRFEsSUFBQUEsTUFBQSxZQUNEa0IsS0FBS0QsSUFBSWMsR0FBR2IsS0FBSzlCLEtBQU1ZLElBTXhCZ0IsRUFBQVAsVUFBQThCLG1CQUFSLGVBQUFULEVBQUFaLEtBQ0UsT0FBT0EsS0FBS1EsU0FBU0MsS0FDbkJiLEVBQUEwQyxJQUFJLFNBQUFNLEdBQVEsT0FBQWhDLEVBQUtQLGFBQWFtQyxLQUFLSSxPQUd6QzlDLEVBbElBLEdBQWE5QyxFQUFBOEMsNEZDVGIsSUFBQUgsRUFBQWxDLEVBQUEsR0FDQW1DLEVBQUFuQyxFQUFBLEdBR0FvRixFQUFBcEYsRUFBQSxHQUVBcUYsRUFBQSxXQUdFLFNBQUFBLEVBQ2tCQyxHQUFBL0MsS0FBQStDLE1BSFYvQyxLQUFBZ0QsZUE2Q1YsT0FwQ1NGLEVBQUF2RCxVQUFBMEQsTUFBUCxXQUNFakQsS0FBSytDLElBQUlFLFNBTUpILEVBQUF2RCxVQUFBZixJQUFQLFNBQVdVLEdBQ1QsT0FBSWMsS0FBS2dELFlBQVk5RCxHQUNaYyxLQUFLZ0QsWUFBWTlELEdBR25CYyxLQUFLZ0QsWUFBWTlELEdBQU8sSUFBSTJELEVBQUEvQyxXQUFXWixFQUFLYyxPQU05QzhDLEVBQUF2RCxVQUFBc0IsR0FBUCxTQUNFRyxFQUNBbEMsR0FGRixJQUFBOEIsRUFBQVosS0FJRSxZQUZBLElBQUFsQixNQUFBLFlBRU9hLEVBQUF1RCxHQUFHLE1BQU16QyxLQUNkYixFQUFBa0IsSUFBSSxXQUFNLE9BQUFGLEVBQUttQyxJQUFJSSxZQUFZbkMsRUFBT2xDLE9BT25DZ0UsRUFBQXZELFVBQUE0RCxZQUFQLFNBQ0VuQyxFQUNBbEMsR0FFQSxZQUZBLElBQUFBLE1BQUEsWUFFT2tCLEtBQUsrQyxJQUFJSSxZQUFZbkMsRUFBT2xDLElBRXZDZ0UsRUE5Q0EsR0FBYTlGLEVBQUE4Riw0YkNMYixJQUdBTSxFQUFBLFNBQUFDLEdBQ0UsU0FBQUQsRUFDRUUsRUFDQUMsRUFDUUMsR0FIVixJQUFBNUMsRUFLRXlDLEVBQUF2RixLQUFBa0MsS0FBTXNELEVBQU9DLElBQU92RCxZQUZaWSxFQUFBNEMsV0FtQlosT0F2QnVDQyxFQUFBTCxFQUFBQyxHQVk5QkQsRUFBQTdELFVBQUFtRSxZQUFQLFNBQW1CeEYsRUFBY3lGLEVBQWlCQyxHQUNoRCxPQUFPNUQsS0FBS3dELE9BQU9FLFlBQVl4RixFQUFNeUYsRUFBU0MsSUFNekNSLEVBQUE3RCxVQUFBc0UsS0FBUCxTQUFZQyxHQUFaLElBQUFsRCxFQUFBWixLQUVFLE9BREErRCxNQUFNQyxLQUFLRixHQUFTRyxRQUFRLFNBQUFDLEdBQVMsT0FBQXRELEVBQUs0QyxPQUFPdkIsSUFBSWlDLEtBQzlDbEUsTUFFWG9ELEVBdkJBLENBSEEzRixFQUFBLEdBR3VDcUMsWUFBMUI5QyxFQUFBb0csb0JBeUJiLElBQUFlLEVBQUEsV0FLRSxTQUFBQSxFQUNVWixFQUNSYSxHQURRcEUsS0FBQXVELFNBR1J2RCxLQUFLcUUsR0FBYUQsRUFBT0UsT0FBT2xELE9BQ2hDcEIsS0FBS3VFLFdBQWFILEVBQU9HLFdBQ3pCdkUsS0FBS3dFLFFBQWFKLEVBQU9LLFdBZTdCLE9BWlNOLEVBQUE1RSxVQUFBTixPQUFQLFNBQWNmLEVBQWN3RyxHQUMxQixJQUFJMUQsRUFBUWhCLEtBQUtxRSxHQUFHTSxrQkFBa0J6RyxFQUFNd0csR0FDNUMsT0FBTyxJQUFJdEIsRUFBa0JsRixFQUFNOEIsS0FBS3VELE9BQVF2QyxJQUczQ21ELEVBQUE1RSxVQUFBdUMsT0FBUCxTQUFjNUQsR0FDWjhCLEtBQUtxRSxHQUFHTyxrQkFBa0IxRyxJQUdyQmlHLEVBQUE1RSxVQUFBc0YsSUFBUCxTQUFXM0csR0FDVCxPQUFPOEIsS0FBS3FFLEdBQUdTLGlCQUFpQkMsU0FBUzdHLElBRTdDaUcsRUExQkEsR0FBYW5ILEVBQUFtSCw0SkM1QmJhLEVBQUF2SCxFQUFBLElBQ0F1SCxFQUFBdkgsRUFBQSxJQUNBdUgsRUFBQXZILEVBQUEsSUFDQSxJQUFBd0gsRUFBQXhILEVBQUEsR0FBU1QsRUFBQWtJLE9BQUFELEVBQUFDLE9BQVFsSSxFQUFBbUksT0FBQUYsRUFBQUUsc0ZDSmpCLElBQUF4RixFQUFBbEMsRUFBQSxHQUNBbUMsRUFBQW5DLEVBQUEsR0FLQVQsRUFBQW1FLGFBQUEsU0FBNkJpRSxHQUMzQixJQUFJQyxFQUF5QixJQUFJMUYsRUFBQU8sUUFLakMsT0FIQWtGLEVBQVFFLFFBQVksU0FBQ0MsR0FBVyxPQUFBRixFQUFTRyxNQUFNRCxJQUMvQ0gsRUFBUUssVUFBWSxTQUFDRixHQUFXLE9BQUFGLEVBQVM3QyxLQUFLK0MsSUFFdkNGLEdBTVRySSxFQUFBNkUsbUJBQUEsU0FBbUM2RCxHQUNqQyxPQUFPQSxFQUFPakYsS0FDWmIsRUFBQWtCLElBQUksU0FBQ3lFLEdBQVcsT0FBQUEsRUFBRWpCLE9BQU9sRCx5a0JDcEI3QixJQUFBekIsRUFBQWxDLEVBQUEsR0FDQW1DLEVBQUFuQyxFQUFBLEdBRUFrSSxFQUFBbEksRUFBQSxHQUVBbUksRUFBQW5JLEVBQUEsR0FFQSxTQUFnQnlILEVBQU9XLEVBQWdCQyxFQUFtQkMsR0FDeEQsSUFHSUMsRUFIQUMsRUFBc0IsSUFBSXRHLEVBQUFPLFFBQzFCZ0csRUFBMEIsSUFBSXZHLEVBQUFPLFFBQzlCa0YsRUFBNEJlLFVBQVVDLEtBQUtQLEVBQVFDLEdBd0J2RCxPQXJCQVYsRUFBUUUsUUFBa0IsU0FBQ0MsR0FBVyxPQUFBVSxFQUFJVCxNQUFNRCxJQUNoREgsRUFBUWlCLFVBQWtCLFNBQUNkLEdBQVcsT0FBQVUsRUFBSVQsTUFBTUQsSUFDaERILEVBQVFLLFVBQWtCLFNBQUNhLEdBQ3pCTixFQUFRQSxHQUFTLElBQUlMLEVBQUE3QyxNQUFNd0QsRUFBTWhDLE9BQU9sRCxRQUN4QzZFLEVBQUl6RCxLQUFLd0QsR0FDVEMsRUFBSU0sV0FFQVQsSUFBY0UsRUFBTWpELElBQUl5QixVQUMxQjBCLEVBQVMxRCxPQUNUMEQsRUFBU0ssYUFHYm5CLEVBQVFvQixnQkFBa0IsU0FBQ0YsR0FDekJOLEVBQVFBLEdBQVMsSUFBSUwsRUFBQTdDLE1BQU13RCxFQUFNaEMsT0FBT2xELFFBQ3hDcUYsRUFBZSxJQUFJYixFQUFBekIsYUFBYTZCLEVBQU9NLEdBQVFQLEdBQVFXLFVBQ3JELFdBQU0sT0FBQVIsRUFBUzFELFFBQ2YsU0FBQytDLEdBQU0sT0FBQVcsRUFBU1YsTUFBTUQsSUFDdEIsV0FBTSxPQUFBVyxFQUFTSyxjQUlaNUcsRUFBQXdDLFVBQVU4RCxFQUFLQyxJQUFXekYsS0FDL0JiLEVBQUFrQixJQUFJLFdBQU0sT0FBQWtGLEtBSWQsU0FBZ0JTLEVBQWVFLEVBQTRCWixHQUN6RCxPQUFLQSxHQUFXQSxFQUFPYSxPQUloQmpILEVBQUF3QyxTQUFTNEQsRUFBT2pGLElBQUksU0FBQStGLEdBQVUsT0FBQUMsRUFBWUgsRUFBY0UsTUFIdERsSCxFQUFBdUQsR0FBRyxNQU1kLFNBQWdCNEQsRUFBWUgsRUFBNEJFLGdCQUFBLElBQUFBLE1BQUEsSUFBMEJFLEtBQzFFLElBQUF4QyxFQUFBb0MsRUFBQXBDLFdBQ0Z5QyxHQUFrQ3JILEVBQUF1RCxJQUFHLFFBRXpDLElBQTZDLElBQUErRCxFQUFBQyxFQUFBTCxHQUFNTSxFQUFBRixFQUFBekUsUUFBQTJFLEVBQUFDLEtBQUFELEVBQUFGLEVBQUF6RSxPQUFFLENBQTFDLElBQUE2RSxFQUFBQyxFQUFBSCxFQUFBdkksTUFBQSxHQUFDMkksRUFBQUYsRUFBQSxHQUFjRyxFQUFBSCxFQUFBLEdBQ3hCLEdBQUk5QyxFQUFhZ0QsRUFBYyxDQUM3QixJQUFJbkcsRUFBU29HLEVBQWViLEdBRXhCdkYsYUFBa0J6QixFQUFBOEgsWUFDcEJULEVBQVlVLEtBQUt0RyxzR0FLdkIsT0FBTzRGLEVBR1QsU0FBZ0I3QixFQUFPVSxHQUNyQixPQUFPbEcsRUFBQThILFdBQVd4SSxPQUFPLFNBQUMwSSxHQUN4QixJQUFJdkMsRUFBVWUsVUFBVXlCLGVBQWUvQixHQUV2Q1QsRUFBUWlCLFVBQVksU0FBQ2QsR0FBTSxPQUFBb0MsRUFBU25DLE1BQU1ELElBQzFDSCxFQUFRSyxVQUFZLFdBQU0sT0FBQWtDLEVBQVNuRixVQUFLaEIsSUFDeEM0RCxFQUFRRSxRQUFVLFNBQUNDLEdBQU0sT0FBQW9DLEVBQVNuQyxNQUFNRCxNQUN2QzlFLEtBQUtiLEVBQUEyQixLQUFLLElBaEVmdkUsRUFBQWtJLFNBZ0NBbEksRUFBQXlKLGlCQVFBekosRUFBQThKLGNBaUJBOUosRUFBQW1JLFNBVWFuSSxFQUFBNkssT0FBVTNDLE9BQU1BLEVBQUVDLE9BQU1BIiwiZmlsZSI6InJ4aWRiLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblx0aWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKVxuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKFwicnhqc1wiKSwgcmVxdWlyZShcInJ4anMvb3BlcmF0b3JzXCIpKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtcInJ4anNcIiwgXCJyeGpzL29wZXJhdG9yc1wiXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJyeGlkYlwiXSA9IGZhY3RvcnkocmVxdWlyZShcInJ4anNcIiksIHJlcXVpcmUoXCJyeGpzL29wZXJhdG9yc1wiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wicnhpZGJcIl0gPSBmYWN0b3J5KHJvb3RbXCJyeGpzXCJdLCByb290W1wicnhqcy9vcGVyYXRvcnNcIl0pO1xufSkod2luZG93LCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXykge1xucmV0dXJuICIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA1KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMF9fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fOyIsImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIG1lcmdlLCBmb3JrSm9pbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIG1hcFRvLCB0YXAsIGZpbHRlciwgYnVmZmVyV2hlbiwgc2hhcmVSZXBsYXksIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFJ4SURCIH0gZnJvbSAnLi9yeGlkYi1kYic7XG5pbXBvcnQgeyBJUnhJREJTdG9yZSB9IGZyb20gJy4vcnhpZGIuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyByeGlmeVJlcXVlc3QsIHJlc3VsdEZyb21JREJFdmVudCB9IGZyb20gJy4vcnhpZGItdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBSeElEQkN1cnNvclJhbmdlID0gc3RyaW5nIHwgbnVtYmVyIHwgSURCS2V5UmFuZ2UgfCBEYXRlIHwgSURCQXJyYXlLZXkgfCB1bmRlZmluZWQ7XG5cbmV4cG9ydCBjbGFzcyBSeElEQlN0b3JlPE1vZGVsID0gYW55PiBpbXBsZW1lbnRzIElSeElEQlN0b3JlIHtcbiAgcHJpdmF0ZSBfdXBkYXRlJDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0KCk7XG4gIHB1YmxpYyB1cGRhdGUkOiBPYnNlcnZhYmxlPGFueT4gPSB0aGlzLl91cGRhdGUkLmFzT2JzZXJ2YWJsZSgpO1xuXG4gIHByaXZhdGUgX2RhdGFVcGRhdGUkOiBTdWJqZWN0PE1vZGVsW10+ID0gbmV3IFN1YmplY3QoKTtcbiAgcHVibGljIGRhdGEkOiBPYnNlcnZhYmxlPE1vZGVsW10+ID0gbWVyZ2UoXG4gICAgdGhpcy5nZXRBbGwoKSxcbiAgICB0aGlzLl9kYXRhVXBkYXRlJFxuICApLnBpcGUoXG4gICAgc2hhcmVSZXBsYXkoMSlcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nLFxuICAgIHByaXZhdGUgX2RiOiBSeElEQlxuICApIHt9XG5cbiAgcHVibGljIGNsZWFyKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnR4KCdyZWFkd3JpdGUnKS5waXBlKFxuICAgICAgbWFwKCh0eCkgPT4gdHgub2JqZWN0U3RvcmUodGhpcy5uYW1lKSksXG4gICAgICBtYXAoKHN0b3JlKSA9PiBzdG9yZS5jbGVhcigpKSxcbiAgICAgIHN3aXRjaE1hcChyZXEgPT4gcnhpZnlSZXF1ZXN0KHJlcSkpLFxuICAgICAgc3dpdGNoTWFwKHJlc3VsdCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZyZXNoRGF0YVN0cmVhbSgpLnBpcGUoXG4gICAgICAgICAgbWFwVG8ocmVzdWx0KVxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgICB0YWtlKDEpLFxuICAgICAgbWFwVG8odW5kZWZpbmVkKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgY3Vyc29yKFxuICAgIG1vZGU6ICdyZWFkb25seSd8J3JlYWR3cml0ZScgPSAncmVhZG9ubHknLFxuICAgIHJhbmdlPzogUnhJREJDdXJzb3JSYW5nZSxcbiAgICBkaXJlY3Rpb24/OiBJREJDdXJzb3JEaXJlY3Rpb25cbiAgKTogT2JzZXJ2YWJsZTxJREJDdXJzb3JXaXRoVmFsdWU+IHtcbiAgICByZXR1cm4gdGhpcy50eChtb2RlKS5waXBlKFxuICAgICAgbWFwKHR4ID0+IHR4Lm9iamVjdFN0b3JlKHRoaXMubmFtZSkpLFxuICAgICAgbWFwKHN0b3JlID0+IHN0b3JlLm9wZW5DdXJzb3IocmFuZ2UsIGRpcmVjdGlvbikpLFxuICAgICAgc3dpdGNoTWFwKHJlcSA9PiByeGlmeVJlcXVlc3QocmVxKSksXG4gICAgICByZXN1bHRGcm9tSURCRXZlbnRcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZShrZXk6IElEQlZhbGlkS2V5KTogT2JzZXJ2YWJsZTx2b2lkPiB7XG4gICAgcmV0dXJuIHRoaXMudHgoJ3JlYWR3cml0ZScpLnBpcGUoXG4gICAgICBtYXAoKHR4KSA9PiB0eC5vYmplY3RTdG9yZSh0aGlzLm5hbWUpKSxcbiAgICAgIG1hcCgoc3RvcmUpID0+IHN0b3JlLmRlbGV0ZShrZXkpKSxcbiAgICAgIHN3aXRjaE1hcChyZXEgPT4gcnhpZnlSZXF1ZXN0KHJlcSkpLFxuICAgICAgc3dpdGNoTWFwKHJlc3VsdCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZyZXNoRGF0YVN0cmVhbSgpLnBpcGUoXG4gICAgICAgICAgbWFwVG8ocmVzdWx0KVxuICAgICAgICApO1xuICAgICAgfSksXG4gICAgICB0YWtlKDEpLFxuICAgICAgbWFwVG8odW5kZWZpbmVkKVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgcmVzZXQoY29sbGVjdGlvbjogYW55W10pOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnR4KCdyZWFkd3JpdGUnKS5waXBlKFxuICAgICAgbWFwKCh0eCkgPT4gdHgub2JqZWN0U3RvcmUodGhpcy5uYW1lKSksXG4gICAgICBzd2l0Y2hNYXAoc3RvcmUgPT4gcnhpZnlSZXF1ZXN0KHN0b3JlLmNsZWFyKCkpLnBpcGUodGFrZSgxKSwgbWFwVG8oc3RvcmUpKSksXG4gICAgICBtYXAoc3RvcmUgPT4ge1xuICAgICAgICByZXR1cm4gY29sbGVjdGlvbi5tYXAodmFsdWUgPT4ge1xuICAgICAgICAgIHJldHVybiByeGlmeVJlcXVlc3Qoc3RvcmUucHV0KHZhbHVlKSkucGlwZShcbiAgICAgICAgICAgIHRha2UoMSksXG4gICAgICAgICAgICByZXN1bHRGcm9tSURCRXZlbnRcbiAgICAgICAgICApO1xuICAgICAgICB9KTtcbiAgICAgIH0pLFxuICAgICAgc3dpdGNoTWFwKCh0YXNrczogT2JzZXJ2YWJsZTxhbnk+W10pID0+IGZvcmtKb2luKHRhc2tzKSksXG4gICAgICBzd2l0Y2hNYXAocmVzdWx0ID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlZnJlc2hEYXRhU3RyZWFtKCkucGlwZShcbiAgICAgICAgICBtYXBUbyhyZXN1bHQpXG4gICAgICAgICk7XG4gICAgICB9KSxcbiAgICAgIHRha2UoMSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldChrZXk6IElEQlZhbGlkS2V5KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy50eCgpLnBpcGUoXG4gICAgICBtYXAoKHR4KSA9PiB0eC5vYmplY3RTdG9yZSh0aGlzLm5hbWUpKSxcbiAgICAgIG1hcChzdG9yZSA9PiBzdG9yZS5nZXQoa2V5KSksXG4gICAgICBzd2l0Y2hNYXAocmVxID0+IHJ4aWZ5UmVxdWVzdChyZXEpKSxcbiAgICAgIHJlc3VsdEZyb21JREJFdmVudFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QWxsKCk6IE9ic2VydmFibGU8TW9kZWxbXT4ge1xuICAgIGxldCBjdXJzb3IkID0gdGhpcy5jdXJzb3IoKTtcbiAgICBsZXQgZG9uZSQgICA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgICByZXR1cm4gY3Vyc29yJC5waXBlKFxuICAgICAgdGFwKGN1cnNvciA9PiAhIWN1cnNvciA/IGN1cnNvci5jb250aW51ZSgpIDogZG9uZSQubmV4dCgpKSxcbiAgICAgIGZpbHRlcihjdXJzb3IgPT4gISFjdXJzb3IpLFxuICAgICAgbWFwKGN1cnNvciA9PiBjdXJzb3IudmFsdWUpLFxuICAgICAgYnVmZmVyV2hlbigoKSA9PiBkb25lJCksXG4gICAgICB0YWtlKDEpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXQodmFsdWU6IGFueSwga2V5PzogSURCVmFsaWRLZXkpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLnR4KCdyZWFkd3JpdGUnKS5waXBlKFxuICAgICAgbWFwKCh0eCkgPT4gdHgub2JqZWN0U3RvcmUodGhpcy5uYW1lKSksXG4gICAgICBtYXAoc3RvcmUgPT4gc3RvcmUucHV0KHZhbHVlLCBrZXkpKSxcbiAgICAgIHN3aXRjaE1hcChyZXEgPT4gcnhpZnlSZXF1ZXN0KHJlcSkpLFxuICAgICAgcmVzdWx0RnJvbUlEQkV2ZW50LFxuICAgICAgc3dpdGNoTWFwKHJlc3VsdCA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWZyZXNoRGF0YVN0cmVhbSgpLnBpcGUoXG4gICAgICAgICAgbWFwVG8ocmVzdWx0KVxuICAgICAgICApO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHR4KG1vZGU6ICdyZWFkb25seScgfCAncmVhZHdyaXRlJyA9ICdyZWFkb25seScpOiBPYnNlcnZhYmxlPElEQlRyYW5zYWN0aW9uPiB7XG4gICAgcmV0dXJuIHRoaXMuX2RiLnR4KHRoaXMubmFtZSwgbW9kZSk7XG4gIH1cblxuICAvKipcbiAgICogVHJpZ2dlciB1cGRhdGUgc3RyZWFtXG4gICAqL1xuICBwcml2YXRlIF9yZWZyZXNoRGF0YVN0cmVhbSgpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHJldHVybiB0aGlzLmdldEFsbCgpLnBpcGUoXG4gICAgICB0YXAoZGF0YSA9PiB0aGlzLl9kYXRhVXBkYXRlJC5uZXh0KGRhdGEpKVxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IElSeElEQiB9IGZyb20gJy4vcnhpZGIuaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBSeElEQlN0b3JlIH0gZnJvbSAnLi9yeGlkYi1zdG9yZSc7XG5cbmV4cG9ydCBjbGFzcyBSeElEQiBpbXBsZW1lbnRzIElSeElEQiB7XG4gIHByaXZhdGUgX3N0b3JlQ2FjaGU6IHtba2V5OiBzdHJpbmddOiBSeElEQlN0b3JlfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yIChcbiAgICBwdWJsaWMgcmVhZG9ubHkgaWRiOiBJREJEYXRhYmFzZVxuICApIHt9XG5cbiAgLyoqXG4gICAqIENsb3NlIGRiXG4gICAqL1xuICBwdWJsaWMgY2xvc2UoKTogdm9pZCB7XG4gICAgdGhpcy5pZGIuY2xvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgc3RvcmVcbiAgICovXG4gIHB1YmxpYyBnZXQoa2V5OiBzdHJpbmcpOiBSeElEQlN0b3JlIHtcbiAgICBpZiAodGhpcy5fc3RvcmVDYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gdGhpcy5fc3RvcmVDYWNoZVtrZXldO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9zdG9yZUNhY2hlW2tleV0gPSBuZXcgUnhJREJTdG9yZShrZXksIHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0cmVhbTogSURCVHJhbnNhY3Rpb25cbiAgICovXG4gIHB1YmxpYyB0eChcbiAgICBzdG9yZTogc3RyaW5nIHwgc3RyaW5nW10sXG4gICAgbW9kZTogJ3JlYWRvbmx5JyB8ICdyZWFkd3JpdGUnID0gJ3JlYWRvbmx5J1xuICApOiBPYnNlcnZhYmxlPElEQlRyYW5zYWN0aW9uPiB7XG4gICAgcmV0dXJuIG9mKG51bGwpLnBpcGUoXG4gICAgICBtYXAoKCkgPT4gdGhpcy5pZGIudHJhbnNhY3Rpb24oc3RvcmUsIG1vZGUpKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogT3BlbiBJREJUcmFuc2FjdGlvblxuICAgKi9cbiAgcHVibGljIHRyYW5zYWN0aW9uKFxuICAgIHN0b3JlOiBzdHJpbmd8c3RyaW5nW10sXG4gICAgbW9kZTogJ3JlYWRvbmx5J3wncmVhZHdyaXRlJyA9ICdyZWFkb25seSdcbiAgKTogSURCVHJhbnNhY3Rpb24ge1xuICAgIHJldHVybiB0aGlzLmlkYi50cmFuc2FjdGlvbihzdG9yZSwgbW9kZSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFJ4SURCIH0gZnJvbSAnLi9yeGlkYi1kYic7XG5pbXBvcnQgeyBSeElEQlN0b3JlIH0gZnJvbSAnLi9yeGlkYi1zdG9yZSc7XG5pbXBvcnQgeyBJUnhJREJVcGdyYWRlIH0gZnJvbSAnLi9yeGlkYi5pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIFJ4SURCVXBncmFkZVN0b3JlIGV4dGVuZHMgUnhJREJTdG9yZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIF9uYW1lOiBzdHJpbmcsXG4gICAgX3J4aWRiOiBSeElEQixcbiAgICBwcml2YXRlIF9zdG9yZTogSURCT2JqZWN0U3RvcmVcbiAgKSB7XG4gICAgc3VwZXIoX25hbWUsIF9yeGlkYik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGluZGV4XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlSW5kZXgobmFtZTogc3RyaW5nLCBrZXlwYXRoOiBzdHJpbmcsIHBhcmFtcz86IElEQkluZGV4UGFyYW1ldGVycyk6IElEQkluZGV4IHtcbiAgICByZXR1cm4gdGhpcy5fc3RvcmUuY3JlYXRlSW5kZXgobmFtZSwga2V5cGF0aCwgcGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxsIERCIHdpdGggZW50cmllc1xuICAgKi9cbiAgcHVibGljIGZpbGwoZW50cmllczogSXRlcmFibGU8YW55Pik6IHRoaXMge1xuICAgIEFycmF5LmZyb20oZW50cmllcykuZm9yRWFjaChlbnRyeSA9PiB0aGlzLl9zdG9yZS5wdXQoZW50cnkpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUnhJREJVcGdyYWRlIGltcGxlbWVudHMgSVJ4SURCVXBncmFkZSB7XG4gIHB1YmxpYyByZWFkb25seSBkYjogSURCRGF0YWJhc2U7XG4gIHB1YmxpYyByZWFkb25seSBvbGRWZXJzaW9uOiBudW1iZXI7XG4gIHB1YmxpYyByZWFkb25seSB2ZXJzaW9uOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHByaXZhdGUgX3J4aWRiOiBSeElEQixcbiAgICBfZXZlbnQ6IGFueVxuICApIHtcbiAgICB0aGlzLmRiICAgICAgICAgPSBfZXZlbnQudGFyZ2V0LnJlc3VsdDtcbiAgICB0aGlzLm9sZFZlcnNpb24gPSBfZXZlbnQub2xkVmVyc2lvbjtcbiAgICB0aGlzLnZlcnNpb24gICAgPSBfZXZlbnQubmV3VmVyc2lvbjtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGUobmFtZTogc3RyaW5nLCBvcHRpb25zPzogSURCT2JqZWN0U3RvcmVQYXJhbWV0ZXJzKTogUnhJREJVcGdyYWRlU3RvcmUge1xuICAgIGxldCBzdG9yZSA9IHRoaXMuZGIuY3JlYXRlT2JqZWN0U3RvcmUobmFtZSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBSeElEQlVwZ3JhZGVTdG9yZShuYW1lLCB0aGlzLl9yeGlkYiwgc3RvcmUpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmRiLmRlbGV0ZU9iamVjdFN0b3JlKG5hbWUpO1xuICB9XG5cbiAgcHVibGljIGhhcyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKG5hbWUpO1xuICB9XG59XG4iLCJleHBvcnQgKiBmcm9tICcuL3NyYy9yeGlkYi50eXBlcyc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9yeGlkYi1kYic7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9yeGlkYi1zdG9yZSc7XG5leHBvcnQgKiBmcm9tICcuL3NyYy9yeGlkYi11cGdyYWRlJztcbmV4cG9ydCB7IG9wZW5EQiwgZHJvcERCIH0gZnJvbSAnLi9zcmMvcnhpZGItc3RhdGljJztcbiIsImltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBSZXNvbHZlIHJlcXVlc3QgYXMgYW4gT2JzZXJ2YWJsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnhpZnlSZXF1ZXN0KHJlcXVlc3Q6IElEQlJlcXVlc3QpOiBPYnNlcnZhYmxlPGFueT4ge1xuICBsZXQgcmVxdWVzdCQ6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgcmVxdWVzdC5vbmVycm9yICAgPSAoZTogYW55KSA9PiByZXF1ZXN0JC5lcnJvcihlKTtcbiAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZTogYW55KSA9PiByZXF1ZXN0JC5uZXh0KGUpO1xuXG4gIHJldHVybiByZXF1ZXN0JDtcbn1cblxuLyoqXG4gKiBQaXBlIG9wZXJhdG9yIGZvciBleHRyYWN0aW5nIHJlc3VsdCBmcm9tIGlkYiBldmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzdWx0RnJvbUlEQkV2ZW50KHNvdXJjZTogT2JzZXJ2YWJsZTxhbnk+KSB7XG4gIHJldHVybiBzb3VyY2UucGlwZShcbiAgICBtYXAoKGU6IGFueSkgPT4gZS50YXJnZXQucmVzdWx0KVxuICApO1xufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZm9ya0pvaW4sIFN1YmplY3QsIG9mLCBPYnNlcnZlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZSwgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBSeElEQiB9IGZyb20gJy4vcnhpZGItZGInO1xuaW1wb3J0IHsgUnhJREJMYXllcnMgfSBmcm9tICcuL3J4aWRiLnR5cGVzJztcbmltcG9ydCB7IFJ4SURCVXBncmFkZSB9IGZyb20gJy4vcnhpZGItdXBncmFkZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBvcGVuREIoZGJOYW1lOiBzdHJpbmcsIGRiVmVyc2lvbjogbnVtYmVyLCBzdG9yZXM/OiBSeElEQkxheWVyc1tdKTogT2JzZXJ2YWJsZTxSeElEQj4ge1xuICBsZXQgZGIkOiBTdWJqZWN0PFJ4SURCPiA9IG5ldyBTdWJqZWN0KCk7XG4gIGxldCB1cGdyYWRlJDogU3ViamVjdDx2b2lkPiA9IG5ldyBTdWJqZWN0KCk7XG4gIGxldCByZXF1ZXN0OiBJREJPcGVuREJSZXF1ZXN0ID0gaW5kZXhlZERCLm9wZW4oZGJOYW1lLCBkYlZlcnNpb24pO1xuICBsZXQgcnhJREI6IFJ4SURCO1xuXG4gIHJlcXVlc3Qub25lcnJvciAgICAgICAgID0gKGU6IGFueSkgPT4gZGIkLmVycm9yKGUpO1xuICByZXF1ZXN0Lm9uYmxvY2tlZCAgICAgICA9IChlOiBhbnkpID0+IGRiJC5lcnJvcihlKTtcbiAgcmVxdWVzdC5vbnN1Y2Nlc3MgICAgICAgPSAoZXZlbnQ6IGFueSkgPT4ge1xuICAgIHJ4SURCID0gcnhJREIgfHwgbmV3IFJ4SURCKGV2ZW50LnRhcmdldC5yZXN1bHQpO1xuICAgIGRiJC5uZXh0KHJ4SURCKTtcbiAgICBkYiQuY29tcGxldGUoKTtcblxuICAgIGlmIChkYlZlcnNpb24gPT09IHJ4SURCLmlkYi52ZXJzaW9uKSB7XG4gICAgICB1cGdyYWRlJC5uZXh0KCk7XG4gICAgICB1cGdyYWRlJC5jb21wbGV0ZSgpO1xuICAgIH1cbiAgfTtcbiAgcmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSAoZXZlbnQ6IGFueSkgPT4ge1xuICAgIHJ4SURCID0gcnhJREIgfHwgbmV3IFJ4SURCKGV2ZW50LnRhcmdldC5yZXN1bHQpO1xuICAgIG9uVXBncmFkZUVuZGVkKG5ldyBSeElEQlVwZ3JhZGUocnhJREIsIGV2ZW50KSwgc3RvcmVzKS5zdWJzY3JpYmUoXG4gICAgICAoKSA9PiB1cGdyYWRlJC5uZXh0KCksXG4gICAgICAoZSkgPT4gdXBncmFkZSQuZXJyb3IoZSksXG4gICAgICAoKSA9PiB1cGdyYWRlJC5jb21wbGV0ZSgpXG4gICAgKTtcbiAgfTtcblxuICByZXR1cm4gZm9ya0pvaW4oW2RiJCwgdXBncmFkZSRdKS5waXBlKFxuICAgIG1hcCgoKSA9PiByeElEQilcbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG9uVXBncmFkZUVuZGVkKHJ4SURCVXBncmFkZTogUnhJREJVcGdyYWRlLCBzdG9yZXM/OiBSeElEQkxheWVyc1tdKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgaWYgKCFzdG9yZXMgfHwgIXN0b3Jlcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gb2YobnVsbCk7XG4gIH1cblxuICByZXR1cm4gZm9ya0pvaW4oc3RvcmVzLm1hcChsYXllcnMgPT4gc2V0dXBMYXllcnMocnhJREJVcGdyYWRlLCBsYXllcnMpKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR1cExheWVycyhyeElEQlVwZ3JhZGU6IFJ4SURCVXBncmFkZSwgbGF5ZXJzOiBSeElEQkxheWVycyA9IG5ldyBNYXAoKSk6IE9ic2VydmFibGU8YW55PltdIHtcbiAgbGV0IHsgb2xkVmVyc2lvbiB9ID0gcnhJREJVcGdyYWRlO1xuICBsZXQgb2JzZXJ2YWJsZXM6IE9ic2VydmFibGU8YW55PltdID0gW29mKHRydWUpXTtcblxuICBmb3IgKGNvbnN0IFtsYXllclZlcnNpb24sIGxheWVySW5zdGFsbGVyXSBvZiBsYXllcnMpIHtcbiAgICBpZiAob2xkVmVyc2lvbiA8IGxheWVyVmVyc2lvbikge1xuICAgICAgbGV0IHJlc3VsdCA9IGxheWVySW5zdGFsbGVyKHJ4SURCVXBncmFkZSk7XG5cbiAgICAgIGlmIChyZXN1bHQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIG9ic2VydmFibGVzLnB1c2gocmVzdWx0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JzZXJ2YWJsZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkcm9wREIoZGJOYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgcmV0dXJuIE9ic2VydmFibGUuY3JlYXRlKChvYnNlcnZlcjogT2JzZXJ2ZXI8dm9pZD4pID0+IHtcbiAgICBsZXQgcmVxdWVzdCA9IGluZGV4ZWREQi5kZWxldGVEYXRhYmFzZShkYk5hbWUpO1xuXG4gICAgcmVxdWVzdC5vbmJsb2NrZWQgPSAoZSkgPT4gb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoKSA9PiBvYnNlcnZlci5uZXh0KHVuZGVmaW5lZCk7XG4gICAgcmVxdWVzdC5vbmVycm9yID0gKGUpID0+IG9ic2VydmVyLmVycm9yKGUpO1xuICB9KS5waXBlKHRha2UoMSkpO1xufVxuXG5leHBvcnQgY29uc3QgcnhpZGIgPSB7IG9wZW5EQiwgZHJvcERCIH07XG4iXSwic291cmNlUm9vdCI6IiJ9