!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("rxjs/operators"),require("rxjs")):"function"==typeof define&&define.amd?define(["rxjs/operators","rxjs"],e):"object"==typeof exports?exports.rxidb=e(require("rxjs/operators"),require("rxjs")):t.rxidb=e(t["rxjs/operators"],t.rxjs)}(window,function(t,e){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(e,r){e.exports=t},function(t,r){t.exports=e},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=r(0),i=r(6),u=function(){function t(t,e){var r=this;this.name=t,this._db=e,this._update$=new n.Subject,this.update$=this._update$.asObservable(),this.data$=n.merge(this.getAll(),this._update$.pipe(o.switchMap(function(){return r.getAll()}))).pipe(o.shareReplay(1))}return t.prototype.clear=function(){var t=this;return this.tx("readwrite").pipe(o.map(function(e){return e.objectStore(t.name)}),o.map(function(t){return t.clear()}),o.switchMap(function(t){return i.rxifyRequest(t)}),o.tap(function(){return t._triggerUpdate()}),o.mapTo(void 0))},t.prototype.cursor=function(t,e,r){var n=this;return void 0===t&&(t="readonly"),this.tx(t).pipe(o.map(function(t){return t.objectStore(n.name)}),o.map(function(t){return t.openCursor(e,r)}),o.switchMap(function(t){return i.rxifyRequest(t)}),i.resultFromIDBEvent)},t.prototype.delete=function(t){var e=this;return this.tx("readwrite").pipe(o.map(function(t){return t.objectStore(e.name)}),o.map(function(e){return e.delete(t)}),o.switchMap(function(t){return i.rxifyRequest(t)}),o.tap(function(){return e._triggerUpdate()}),o.mapTo(void 0))},t.prototype.reset=function(t){var e=this;return this.tx("readwrite").pipe(o.map(function(t){return t.objectStore(e.name)}),o.switchMap(function(t){return i.rxifyRequest(t.clear()).pipe(o.take(1),o.mapTo(t))}),o.map(function(e){return t.map(function(t){return i.rxifyRequest(e.put(t)).pipe(o.take(1),i.resultFromIDBEvent)})}),o.switchMap(function(t){return n.forkJoin(t)}),o.tap(function(){return e._triggerUpdate()}))},t.prototype.get=function(t){var e=this;return this.tx().pipe(o.map(function(t){return t.objectStore(e.name)}),o.map(function(e){return e.get(t)}),o.switchMap(function(t){return i.rxifyRequest(t)}),i.resultFromIDBEvent)},t.prototype.getAll=function(){var t=this.cursor(),e=new n.Subject;return t.pipe(o.tap(function(t){return t?t.continue():e.next()}),o.filter(function(t){return!!t}),o.map(function(t){return t.value}),o.bufferWhen(function(){return e}),o.take(1))},t.prototype.set=function(t,e){var r=this;return this.tx("readwrite").pipe(o.map(function(t){return t.objectStore(r.name)}),o.map(function(r){return r.put(t,e)}),o.switchMap(function(t){return i.rxifyRequest(t)}),o.tap(function(){return r._triggerUpdate()}),i.resultFromIDBEvent)},t.prototype.tx=function(t){return void 0===t&&(t="readonly"),this._db.tx(this.name,t)},t.prototype._triggerUpdate=function(){this._update$.next()},t}();e.RxIDBStore=u},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r,n){var o=t.call(this,e,r)||this;return o._store=n,o}return o(e,t),e.prototype.createIndex=function(t,e,r){return this._store.createIndex(t,e,r)},e.prototype.fill=function(t){var e=this;return Array.from(t).forEach(function(t){return e._store.put(t)}),this},e}(r(2).RxIDBStore);e.RxIDBUpgradeStore=i;var u=function(){function t(t,e){this._rxidb=t,this.db=e.target.result,this.oldVersion=e.oldVersion,this.version=e.newVersion}return t.prototype.create=function(t,e){var r=this.db.createObjectStore(t,e);return new i(t,this._rxidb,r)},t.prototype.delete=function(t){this.db.deleteObjectStore(t)},t.prototype.has=function(t){return this.db.objectStoreNames.contains(t)},t}();e.RxIDBUpgrade=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=r(0),i=r(2),u=function(){function t(t){this.idb=t,this._storeCache={}}return t.prototype.close=function(){this.idb.close()},t.prototype.get=function(t){return this._storeCache[t]?this._storeCache[t]:this._storeCache[t]=new i.RxIDBStore(t,this)},t.prototype.tx=function(t,e){var r=this;return void 0===e&&(e="readonly"),n.of(null).pipe(o.map(function(){return r.idb.transaction(t,e)}))},t.prototype.transaction=function(t,e){return void 0===e&&(e="readonly"),this.idb.transaction(t,e)},t}();e.RxIDB=u},function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],r=0;return e?e.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}},o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(e,"__esModule",{value:!0});var i=r(1),u=r(0),c=r(4),a=r(3);function p(t,e,r){var n,o=new i.Subject,p=new i.Subject,f=indexedDB.open(t,e);return f.onerror=function(t){return o.error(t)},f.onblocked=function(t){return o.error(t)},f.onsuccess=function(t){n=n||new c.RxIDB(t.target.result),o.next(n),o.complete(),e===n.idb.version&&(p.next(),p.complete())},f.onupgradeneeded=function(t){n=n||new c.RxIDB(t.target.result),s(new a.RxIDBUpgrade(n,t),r).subscribe(function(){return p.next()},function(t){return p.error(t)},function(){return p.complete()})},i.forkJoin([o,p]).pipe(u.map(function(){return n}))}function s(t,e){return e&&e.length?i.forkJoin(e.map(function(e){return f(t,e)})):i.of(null)}function f(t,e){var r,u;void 0===e&&(e=new Map);var c=t.oldVersion,a=[i.of(!0)];try{for(var p=n(e),s=p.next();!s.done;s=p.next()){var f=o(s.value,2),l=f[0],d=f[1];if(c<l){var h=d(t);h instanceof i.Observable&&a.push(h)}}}catch(t){r={error:t}}finally{try{s&&!s.done&&(u=p.return)&&u.call(p)}finally{if(r)throw r.error}}return a}function l(t){return i.Observable.create(function(e){var r=indexedDB.deleteDatabase(t);r.onblocked=function(t){return e.error(t)},r.onsuccess=function(){return e.next(void 0)},r.onerror=function(t){return e.error(t)}}).pipe(u.take(1))}e.openDB=p,e.onUpgradeEnded=s,e.setupLayers=f,e.dropDB=l,e.rxidb={openDB:p,dropDB:l}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=r(0);e.rxifyRequest=function(t){var e=new n.Subject;return t.onerror=function(t){return e.error(t)},t.onsuccess=function(t){return e.next(t)},e},e.resultFromIDBEvent=function(t){return t.pipe(o.map(function(t){return t.target.result}))}},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(4)),n(r(2)),n(r(3));var o=r(5);e.openDB=o.openDB,e.dropDB=o.dropDB}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yeGlkYi93ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCJ3ZWJwYWNrOi8vcnhpZGIvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vcnhpZGIvZXh0ZXJuYWwgXCJyeGpzL29wZXJhdG9yc1wiIiwid2VicGFjazovL3J4aWRiL2V4dGVybmFsIFwicnhqc1wiIiwid2VicGFjazovL3J4aWRiLy4vc3JjL3J4aWRiLXN0b3JlLnRzIiwid2VicGFjazovL3J4aWRiLy4vc3JjL3J4aWRiLXVwZ3JhZGUudHMiLCJ3ZWJwYWNrOi8vcnhpZGIvLi9zcmMvcnhpZGItZGIudHMiLCJ3ZWJwYWNrOi8vcnhpZGIvLi9zcmMvcnhpZGItc3RhdGljLnRzIiwid2VicGFjazovL3J4aWRiLy4vc3JjL3J4aWRiLXV0aWxzLnRzIiwid2VicGFjazovL3J4aWRiLy4vcnhpZGIudHMiXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwicmVxdWlyZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXyIsIl9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzFfXyIsImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJyeGpzXzEiLCJvcGVyYXRvcnNfMSIsInJ4aWRiX3V0aWxzXzEiLCJSeElEQlN0b3JlIiwiX2RiIiwiX3RoaXMiLCJ0aGlzIiwiX3VwZGF0ZSQiLCJTdWJqZWN0IiwidXBkYXRlJCIsImFzT2JzZXJ2YWJsZSIsImRhdGEkIiwibWVyZ2UiLCJnZXRBbGwiLCJwaXBlIiwic3dpdGNoTWFwIiwic2hhcmVSZXBsYXkiLCJjbGVhciIsInR4IiwibWFwIiwib2JqZWN0U3RvcmUiLCJzdG9yZSIsInJlcSIsInJ4aWZ5UmVxdWVzdCIsInRhcCIsIl90cmlnZ2VyVXBkYXRlIiwibWFwVG8iLCJ1bmRlZmluZWQiLCJjdXJzb3IiLCJyYW5nZSIsImRpcmVjdGlvbiIsIm9wZW5DdXJzb3IiLCJyZXN1bHRGcm9tSURCRXZlbnQiLCJkZWxldGUiLCJyZXNldCIsImNvbGxlY3Rpb24iLCJ0YWtlIiwicHV0IiwidGFza3MiLCJmb3JrSm9pbiIsImN1cnNvciQiLCJkb25lJCIsImNvbnRpbnVlIiwibmV4dCIsImZpbHRlciIsImJ1ZmZlcldoZW4iLCJzZXQiLCJSeElEQlVwZ3JhZGVTdG9yZSIsIl9zdXBlciIsIl9uYW1lIiwiX3J4aWRiIiwiX3N0b3JlIiwiX19leHRlbmRzIiwiY3JlYXRlSW5kZXgiLCJrZXlwYXRoIiwicGFyYW1zIiwiZmlsbCIsImVudHJpZXMiLCJBcnJheSIsImZyb20iLCJmb3JFYWNoIiwiZW50cnkiLCJSeElEQlVwZ3JhZGUiLCJfZXZlbnQiLCJkYiIsInRhcmdldCIsInJlc3VsdCIsIm9sZFZlcnNpb24iLCJ2ZXJzaW9uIiwibmV3VmVyc2lvbiIsIm9wdGlvbnMiLCJjcmVhdGVPYmplY3RTdG9yZSIsImRlbGV0ZU9iamVjdFN0b3JlIiwiaGFzIiwib2JqZWN0U3RvcmVOYW1lcyIsImNvbnRhaW5zIiwicnhpZGJfc3RvcmVfMSIsIlJ4SURCIiwiaWRiIiwiX3N0b3JlQ2FjaGUiLCJjbG9zZSIsIm9mIiwidHJhbnNhY3Rpb24iLCJyeGlkYl9kYl8xIiwicnhpZGJfdXBncmFkZV8xIiwib3BlbkRCIiwiZGJOYW1lIiwiZGJWZXJzaW9uIiwic3RvcmVzIiwicnhJREIiLCJkYiQiLCJ1cGdyYWRlJCIsInJlcXVlc3QiLCJpbmRleGVkREIiLCJvcGVuIiwib25lcnJvciIsImUiLCJlcnJvciIsIm9uYmxvY2tlZCIsIm9uc3VjY2VzcyIsImV2ZW50IiwiY29tcGxldGUiLCJvbnVwZ3JhZGVuZWVkZWQiLCJvblVwZ3JhZGVFbmRlZCIsInN1YnNjcmliZSIsInJ4SURCVXBncmFkZSIsImxlbmd0aCIsImxheWVycyIsInNldHVwTGF5ZXJzIiwiTWFwIiwib2JzZXJ2YWJsZXMiLCJsYXllcnNfMSIsIl9fdmFsdWVzIiwibGF5ZXJzXzFfMSIsImRvbmUiLCJfYiIsIl9fcmVhZCIsImxheWVyVmVyc2lvbiIsImxheWVySW5zdGFsbGVyIiwiT2JzZXJ2YWJsZSIsInB1c2giLCJkcm9wREIiLCJvYnNlcnZlciIsImRlbGV0ZURhdGFiYXNlIiwicnhpZGIiLCJyZXF1ZXN0JCIsInNvdXJjZSIsIl9fZXhwb3J0IiwicnhpZGJfc3RhdGljXzEiXSwibWFwcGluZ3MiOiJDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsaUJBQUFDLFNBQUEsaUJBQUFDLE9BQ0FBLE9BQUFELFFBQUFELEVBQUFHLFFBQUEsa0JBQUFBLFFBQUEsU0FDQSxtQkFBQUMsZUFBQUMsSUFDQUQsUUFBQSx5QkFBQUosR0FDQSxpQkFBQUMsUUFDQUEsUUFBQSxNQUFBRCxFQUFBRyxRQUFBLGtCQUFBQSxRQUFBLFNBRUFKLEVBQUEsTUFBQUMsRUFBQUQsRUFBQSxrQkFBQUEsRUFBQSxNQVJBLENBU0NPLE9BQUEsU0FBQUMsRUFBQUMsR0FDRCxtQkNUQSxJQUFBQyxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBVixRQUdBLElBQUFDLEVBQUFPLEVBQUFFLElBQ0FDLEVBQUFELEVBQ0FFLEdBQUEsRUFDQVosWUFVQSxPQU5BYSxFQUFBSCxHQUFBSSxLQUFBYixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBUyxHQUdBUixFQUFBVyxHQUFBLEVBR0FYLEVBQUFELFFBMERBLE9BckRB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LE9BQU8sU0FBQ29JLEdBQ3hCLElBQUk5QixFQUFVQyxVQUFVOEIsZUFBZXJDLEdBRXZDTSxFQUFRTSxVQUFZLFNBQUNGLEdBQU0sT0FBQTBCLEVBQVN6QixNQUFNRCxJQUMxQ0osRUFBUU8sVUFBWSxXQUFNLE9BQUF1QixFQUFTL0UsVUFBS2hCLElBQ3hDaUUsRUFBUUcsUUFBVSxTQUFDQyxHQUFNLE9BQUEwQixFQUFTekIsTUFBTUQsTUFDdkNsRixLQUFLYixFQUFBbUMsS0FBSyxJQWhFZi9FLEVBQUFnSSxTQWdDQWhJLEVBQUFrSixpQkFRQWxKLEVBQUF1SixjQWlCQXZKLEVBQUFvSyxTQVVhcEssRUFBQXVLLE9BQVV2QyxPQUFNQSxFQUFFb0MsT0FBTUEsa0ZDMUVyQyxJQUFBekgsRUFBQWxDLEVBQUEsR0FDQW1DLEVBQUFuQyxFQUFBLEdBS0FULEVBQUFrRSxhQUFBLFNBQTZCcUUsR0FDM0IsSUFBSWlDLEVBQXlCLElBQUk3SCxFQUFBUSxRQUtqQyxPQUhBb0YsRUFBUUcsUUFBWSxTQUFDQyxHQUFXLE9BQUE2QixFQUFTNUIsTUFBTUQsSUFDL0NKLEVBQVFPLFVBQVksU0FBQ0gsR0FBVyxPQUFBNkIsRUFBU2xGLEtBQUtxRCxJQUV2QzZCLEdBTVR4SyxFQUFBMkUsbUJBQUEsU0FBbUM4RixHQUNqQyxPQUFPQSxFQUFPaEgsS0FDWmIsRUFBQWtCLElBQUksU0FBQzZFLEdBQVcsT0FBQUEsRUFBRS9CLE9BQU9DLHdKQ25CN0I2RCxFQUFBakssRUFBQSxJQUNBaUssRUFBQWpLLEVBQUEsSUFDQWlLLEVBQUFqSyxFQUFBLElBQ0EsSUFBQWtLLEVBQUFsSyxFQUFBLEdBQVNULEVBQUFnSSxPQUFBMkMsRUFBQTNDLE9BQVFoSSxFQUFBb0ssT0FBQU8sRUFBQVAiLCJmaWxlIjoicnhpZGIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJyeGpzL29wZXJhdG9yc1wiKSwgcmVxdWlyZShcInJ4anNcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoW1wicnhqcy9vcGVyYXRvcnNcIiwgXCJyeGpzXCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInJ4aWRiXCJdID0gZmFjdG9yeShyZXF1aXJlKFwicnhqcy9vcGVyYXRvcnNcIiksIHJlcXVpcmUoXCJyeGpzXCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJyeGlkYlwiXSA9IGZhY3Rvcnkocm9vdFtcInJ4anMvb3BlcmF0b3JzXCJdLCByb290W1wicnhqc1wiXSk7XG59KSh3aW5kb3csIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfXzBfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9fMV9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18wX187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX18xX187IiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCwgbWVyZ2UsIGZvcmtKb2luIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAsIHN3aXRjaE1hcCwgbWFwVG8sIHRhcCwgZmlsdGVyLCBidWZmZXJXaGVuLCBzaGFyZVJlcGxheSwgdGFrZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHsgUnhJREIgfSBmcm9tICcuL3J4aWRiLWRiJztcbmltcG9ydCB7IElSeElEQlN0b3JlIH0gZnJvbSAnLi9yeGlkYi5pbnRlcmZhY2VzJztcbmltcG9ydCB7IHJ4aWZ5UmVxdWVzdCwgcmVzdWx0RnJvbUlEQkV2ZW50IH0gZnJvbSAnLi9yeGlkYi11dGlscyc7XG5cbmV4cG9ydCB0eXBlIFJ4SURCQ3Vyc29yUmFuZ2UgPSBzdHJpbmcgfCBudW1iZXIgfCBJREJLZXlSYW5nZSB8IERhdGUgfCBJREJBcnJheUtleSB8IHVuZGVmaW5lZDtcblxuZXhwb3J0IGNsYXNzIFJ4SURCU3RvcmU8TW9kZWwgPSBhbnk+IGltcGxlbWVudHMgSVJ4SURCU3RvcmUge1xuICBwcml2YXRlIF91cGRhdGUkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcbiAgcHVibGljIHVwZGF0ZSQ6IE9ic2VydmFibGU8YW55PiA9IHRoaXMuX3VwZGF0ZSQuYXNPYnNlcnZhYmxlKCk7XG5cbiAgcHVibGljIGRhdGEkOiBPYnNlcnZhYmxlPE1vZGVsW10+ID0gbWVyZ2UoXG4gICAgdGhpcy5nZXRBbGwoKSxcbiAgICB0aGlzLl91cGRhdGUkLnBpcGUoc3dpdGNoTWFwKCgpID0+IHRoaXMuZ2V0QWxsKCkpKVxuICApLnBpcGUoXG4gICAgc2hhcmVSZXBsYXkoMSlcbiAgKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nLFxuICAgIHByaXZhdGUgX2RiOiBSeElEQlxuICApIHt9XG5cbiAgcHVibGljIGNsZWFyKCk6IE9ic2VydmFibGU8dm9pZD4ge1xuICAgIHJldHVybiB0aGlzLnR4KCdyZWFkd3JpdGUnKS5waXBlKFxuICAgICAgbWFwKCh0eCkgPT4gdHgub2JqZWN0U3RvcmUodGhpcy5uYW1lKSksXG4gICAgICBtYXAoKHN0b3JlKSA9PiBzdG9yZS5jbGVhcigpKSxcbiAgICAgIHN3aXRjaE1hcChyZXEgPT4gcnhpZnlSZXF1ZXN0KHJlcSkpLFxuICAgICAgdGFwKCgpID0+IHRoaXMuX3RyaWdnZXJVcGRhdGUoKSksXG4gICAgICBtYXBUbyh1bmRlZmluZWQpXG4gICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBjdXJzb3IoXG4gICAgbW9kZTogJ3JlYWRvbmx5J3wncmVhZHdyaXRlJyA9ICdyZWFkb25seScsXG4gICAgcmFuZ2U/OiBSeElEQkN1cnNvclJhbmdlLFxuICAgIGRpcmVjdGlvbj86IElEQkN1cnNvckRpcmVjdGlvblxuICApOiBPYnNlcnZhYmxlPElEQkN1cnNvcldpdGhWYWx1ZT4ge1xuICAgIHJldHVybiB0aGlzLnR4KG1vZGUpLnBpcGUoXG4gICAgICBtYXAodHggPT4gdHgub2JqZWN0U3RvcmUodGhpcy5uYW1lKSksXG4gICAgICBtYXAoc3RvcmUgPT4gc3RvcmUub3BlbkN1cnNvcihyYW5nZSwgZGlyZWN0aW9uKSksXG4gICAgICBzd2l0Y2hNYXAocmVxID0+IHJ4aWZ5UmVxdWVzdChyZXEpKSxcbiAgICAgIHJlc3VsdEZyb21JREJFdmVudFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZGVsZXRlKGtleTogSURCVmFsaWRLZXkpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcbiAgICByZXR1cm4gdGhpcy50eCgncmVhZHdyaXRlJykucGlwZShcbiAgICAgIG1hcCgodHgpID0+IHR4Lm9iamVjdFN0b3JlKHRoaXMubmFtZSkpLFxuICAgICAgbWFwKChzdG9yZSkgPT4gc3RvcmUuZGVsZXRlKGtleSkpLFxuICAgICAgc3dpdGNoTWFwKHJlcSA9PiByeGlmeVJlcXVlc3QocmVxKSksXG4gICAgICB0YXAoKCkgPT4gdGhpcy5fdHJpZ2dlclVwZGF0ZSgpKSxcbiAgICAgIG1hcFRvKHVuZGVmaW5lZClcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHJlc2V0KGNvbGxlY3Rpb246IGFueVtdKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy50eCgncmVhZHdyaXRlJykucGlwZShcbiAgICAgIG1hcCgodHgpID0+IHR4Lm9iamVjdFN0b3JlKHRoaXMubmFtZSkpLFxuICAgICAgc3dpdGNoTWFwKHN0b3JlID0+IHJ4aWZ5UmVxdWVzdChzdG9yZS5jbGVhcigpKS5waXBlKHRha2UoMSksIG1hcFRvKHN0b3JlKSkpLFxuICAgICAgbWFwKHN0b3JlID0+IHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24ubWFwKHZhbHVlID0+IHtcbiAgICAgICAgICByZXR1cm4gcnhpZnlSZXF1ZXN0KHN0b3JlLnB1dCh2YWx1ZSkpLnBpcGUoXG4gICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgcmVzdWx0RnJvbUlEQkV2ZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICB9KSxcbiAgICAgIHN3aXRjaE1hcCgodGFza3M6IE9ic2VydmFibGU8YW55PltdKSA9PiBmb3JrSm9pbih0YXNrcykpLFxuICAgICAgdGFwKCgpID0+IHRoaXMuX3RyaWdnZXJVcGRhdGUoKSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIGdldChrZXk6IElEQlZhbGlkS2V5KTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gdGhpcy50eCgpLnBpcGUoXG4gICAgICBtYXAoKHR4KSA9PiB0eC5vYmplY3RTdG9yZSh0aGlzLm5hbWUpKSxcbiAgICAgIG1hcChzdG9yZSA9PiBzdG9yZS5nZXQoa2V5KSksXG4gICAgICBzd2l0Y2hNYXAocmVxID0+IHJ4aWZ5UmVxdWVzdChyZXEpKSxcbiAgICAgIHJlc3VsdEZyb21JREJFdmVudFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0QWxsKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgbGV0IGN1cnNvciQgPSB0aGlzLmN1cnNvcigpO1xuICAgIGxldCBkb25lJCAgID0gbmV3IFN1YmplY3QoKTtcblxuICAgIHJldHVybiBjdXJzb3IkLnBpcGUoXG4gICAgICB0YXAoY3Vyc29yID0+ICEhY3Vyc29yID8gY3Vyc29yLmNvbnRpbnVlKCkgOiBkb25lJC5uZXh0KCkpLFxuICAgICAgZmlsdGVyKGN1cnNvciA9PiAhIWN1cnNvciksXG4gICAgICBtYXAoY3Vyc29yID0+IGN1cnNvci52YWx1ZSksXG4gICAgICBidWZmZXJXaGVuKCgpID0+IGRvbmUkKSxcbiAgICAgIHRha2UoMSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHNldCh2YWx1ZTogYW55LCBrZXk/OiBJREJWYWxpZEtleSk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMudHgoJ3JlYWR3cml0ZScpLnBpcGUoXG4gICAgICBtYXAoKHR4KSA9PiB0eC5vYmplY3RTdG9yZSh0aGlzLm5hbWUpKSxcbiAgICAgIG1hcChzdG9yZSA9PiBzdG9yZS5wdXQodmFsdWUsIGtleSkpLFxuICAgICAgc3dpdGNoTWFwKHJlcSA9PiByeGlmeVJlcXVlc3QocmVxKSksXG4gICAgICB0YXAoKCkgPT4gdGhpcy5fdHJpZ2dlclVwZGF0ZSgpKSxcbiAgICAgIHJlc3VsdEZyb21JREJFdmVudFxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgdHgobW9kZTogJ3JlYWRvbmx5JyB8ICdyZWFkd3JpdGUnID0gJ3JlYWRvbmx5Jyk6IE9ic2VydmFibGU8SURCVHJhbnNhY3Rpb24+IHtcbiAgICByZXR1cm4gdGhpcy5fZGIudHgodGhpcy5uYW1lLCBtb2RlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VyIHVwZGF0ZSBzdHJlYW1cbiAgICovXG4gIHByaXZhdGUgX3RyaWdnZXJVcGRhdGUoKSB7XG4gICAgdGhpcy5fdXBkYXRlJC5uZXh0KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFJ4SURCIH0gZnJvbSAnLi9yeGlkYi1kYic7XG5pbXBvcnQgeyBSeElEQlN0b3JlIH0gZnJvbSAnLi9yeGlkYi1zdG9yZSc7XG5pbXBvcnQgeyBJUnhJREJVcGdyYWRlIH0gZnJvbSAnLi9yeGlkYi5pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIFJ4SURCVXBncmFkZVN0b3JlIGV4dGVuZHMgUnhJREJTdG9yZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIF9uYW1lOiBzdHJpbmcsXG4gICAgX3J4aWRiOiBSeElEQixcbiAgICBwcml2YXRlIF9zdG9yZTogSURCT2JqZWN0U3RvcmVcbiAgKSB7XG4gICAgc3VwZXIoX25hbWUsIF9yeGlkYik7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGluZGV4XG4gICAqL1xuICBwdWJsaWMgY3JlYXRlSW5kZXgobmFtZTogc3RyaW5nLCBrZXlwYXRoOiBzdHJpbmcsIHBhcmFtcz86IElEQkluZGV4UGFyYW1ldGVycyk6IElEQkluZGV4IHtcbiAgICByZXR1cm4gdGhpcy5fc3RvcmUuY3JlYXRlSW5kZXgobmFtZSwga2V5cGF0aCwgcGFyYW1zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaWxsIERCIHdpdGggZW50cmllc1xuICAgKi9cbiAgcHVibGljIGZpbGwoZW50cmllczogSXRlcmFibGU8YW55Pik6IHRoaXMge1xuICAgIEFycmF5LmZyb20oZW50cmllcykuZm9yRWFjaChlbnRyeSA9PiB0aGlzLl9zdG9yZS5wdXQoZW50cnkpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgUnhJREJVcGdyYWRlIGltcGxlbWVudHMgSVJ4SURCVXBncmFkZSB7XG4gIHB1YmxpYyByZWFkb25seSBkYjogSURCRGF0YWJhc2U7XG4gIHB1YmxpYyByZWFkb25seSBvbGRWZXJzaW9uOiBudW1iZXI7XG4gIHB1YmxpYyByZWFkb25seSB2ZXJzaW9uOiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHByaXZhdGUgX3J4aWRiOiBSeElEQixcbiAgICBfZXZlbnQ6IGFueVxuICApIHtcbiAgICB0aGlzLmRiICAgICAgICAgPSBfZXZlbnQudGFyZ2V0LnJlc3VsdDtcbiAgICB0aGlzLm9sZFZlcnNpb24gPSBfZXZlbnQub2xkVmVyc2lvbjtcbiAgICB0aGlzLnZlcnNpb24gICAgPSBfZXZlbnQubmV3VmVyc2lvbjtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGUobmFtZTogc3RyaW5nLCBvcHRpb25zPzogSURCT2JqZWN0U3RvcmVQYXJhbWV0ZXJzKTogUnhJREJVcGdyYWRlU3RvcmUge1xuICAgIGxldCBzdG9yZSA9IHRoaXMuZGIuY3JlYXRlT2JqZWN0U3RvcmUobmFtZSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIG5ldyBSeElEQlVwZ3JhZGVTdG9yZShuYW1lLCB0aGlzLl9yeGlkYiwgc3RvcmUpO1xuICB9XG5cbiAgcHVibGljIGRlbGV0ZShuYW1lOiBzdHJpbmcpOiB2b2lkIHtcbiAgICB0aGlzLmRiLmRlbGV0ZU9iamVjdFN0b3JlKG5hbWUpO1xuICB9XG5cbiAgcHVibGljIGhhcyhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kYi5vYmplY3RTdG9yZU5hbWVzLmNvbnRhaW5zKG5hbWUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQgeyBJUnhJREIgfSBmcm9tICcuL3J4aWRiLmludGVyZmFjZXMnO1xuaW1wb3J0IHsgUnhJREJTdG9yZSB9IGZyb20gJy4vcnhpZGItc3RvcmUnO1xuXG5leHBvcnQgY2xhc3MgUnhJREIgaW1wbGVtZW50cyBJUnhJREIge1xuICBwcml2YXRlIF9zdG9yZUNhY2hlOiB7W2tleTogc3RyaW5nXTogUnhJREJTdG9yZX0gPSB7fTtcblxuICBjb25zdHJ1Y3RvciAoXG4gICAgcHVibGljIHJlYWRvbmx5IGlkYjogSURCRGF0YWJhc2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBDbG9zZSBkYlxuICAgKi9cbiAgcHVibGljIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMuaWRiLmNsb3NlKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHN0b3JlXG4gICAqL1xuICBwdWJsaWMgZ2V0KGtleTogc3RyaW5nKTogUnhJREJTdG9yZSB7XG4gICAgaWYgKHRoaXMuX3N0b3JlQ2FjaGVba2V5XSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3N0b3JlQ2FjaGVba2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fc3RvcmVDYWNoZVtrZXldID0gbmV3IFJ4SURCU3RvcmUoa2V5LCB0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdHJlYW06IElEQlRyYW5zYWN0aW9uXG4gICAqL1xuICBwdWJsaWMgdHgoc3RvcmU6IHN0cmluZyB8IHN0cmluZ1tdLCBtb2RlOiAncmVhZG9ubHknIHwgJ3JlYWR3cml0ZScgPSAncmVhZG9ubHknKTogT2JzZXJ2YWJsZTxJREJUcmFuc2FjdGlvbj4ge1xuICAgIHJldHVybiBvZihudWxsKS5waXBlKFxuICAgICAgbWFwKCgpID0+IHRoaXMuaWRiLnRyYW5zYWN0aW9uKHN0b3JlLCBtb2RlKSlcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW4gSURCVHJhbnNhY3Rpb25cbiAgICovXG4gIHB1YmxpYyB0cmFuc2FjdGlvbihzdG9yZTogc3RyaW5nfHN0cmluZ1tdLCBtb2RlOiAncmVhZG9ubHknfCdyZWFkd3JpdGUnID0gJ3JlYWRvbmx5Jyk6IElEQlRyYW5zYWN0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5pZGIudHJhbnNhY3Rpb24oc3RvcmUsIG1vZGUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBPYnNlcnZhYmxlLCBmb3JrSm9pbiwgU3ViamVjdCwgb2YsIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YWtlLCBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7IFJ4SURCIH0gZnJvbSAnLi9yeGlkYi1kYic7XG5pbXBvcnQgeyBSeElEQkxheWVycyB9IGZyb20gJy4vcnhpZGIudHlwZXMnO1xuaW1wb3J0IHsgUnhJREJVcGdyYWRlIH0gZnJvbSAnLi9yeGlkYi11cGdyYWRlJztcblxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5EQihkYk5hbWU6IHN0cmluZywgZGJWZXJzaW9uOiBudW1iZXIsIHN0b3Jlcz86IFJ4SURCTGF5ZXJzW10pOiBPYnNlcnZhYmxlPFJ4SURCPiB7XG4gIGxldCBkYiQ6IFN1YmplY3Q8UnhJREI+ID0gbmV3IFN1YmplY3QoKTtcbiAgbGV0IHVwZ3JhZGUkOiBTdWJqZWN0PHZvaWQ+ID0gbmV3IFN1YmplY3QoKTtcbiAgbGV0IHJlcXVlc3Q6IElEQk9wZW5EQlJlcXVlc3QgPSBpbmRleGVkREIub3BlbihkYk5hbWUsIGRiVmVyc2lvbik7XG4gIGxldCByeElEQjogUnhJREI7XG5cbiAgcmVxdWVzdC5vbmVycm9yICAgICAgICAgPSAoZTogYW55KSA9PiBkYiQuZXJyb3IoZSk7XG4gIHJlcXVlc3Qub25ibG9ja2VkICAgICAgID0gKGU6IGFueSkgPT4gZGIkLmVycm9yKGUpO1xuICByZXF1ZXN0Lm9uc3VjY2VzcyAgICAgICA9IChldmVudDogYW55KSA9PiB7XG4gICAgcnhJREIgPSByeElEQiB8fCBuZXcgUnhJREIoZXZlbnQudGFyZ2V0LnJlc3VsdCk7XG4gICAgZGIkLm5leHQocnhJREIpO1xuICAgIGRiJC5jb21wbGV0ZSgpO1xuXG4gICAgaWYgKGRiVmVyc2lvbiA9PT0gcnhJREIuaWRiLnZlcnNpb24pIHtcbiAgICAgIHVwZ3JhZGUkLm5leHQoKTtcbiAgICAgIHVwZ3JhZGUkLmNvbXBsZXRlKCk7XG4gICAgfVxuICB9O1xuICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IChldmVudDogYW55KSA9PiB7XG4gICAgcnhJREIgPSByeElEQiB8fCBuZXcgUnhJREIoZXZlbnQudGFyZ2V0LnJlc3VsdCk7XG4gICAgb25VcGdyYWRlRW5kZWQobmV3IFJ4SURCVXBncmFkZShyeElEQiwgZXZlbnQpLCBzdG9yZXMpLnN1YnNjcmliZShcbiAgICAgICgpID0+IHVwZ3JhZGUkLm5leHQoKSxcbiAgICAgIChlKSA9PiB1cGdyYWRlJC5lcnJvcihlKSxcbiAgICAgICgpID0+IHVwZ3JhZGUkLmNvbXBsZXRlKClcbiAgICApO1xuICB9O1xuXG4gIHJldHVybiBmb3JrSm9pbihbZGIkLCB1cGdyYWRlJF0pLnBpcGUoXG4gICAgbWFwKCgpID0+IHJ4SURCKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gb25VcGdyYWRlRW5kZWQocnhJREJVcGdyYWRlOiBSeElEQlVwZ3JhZGUsIHN0b3Jlcz86IFJ4SURCTGF5ZXJzW10pOiBPYnNlcnZhYmxlPGFueT4ge1xuICBpZiAoIXN0b3JlcyB8fCAhc3RvcmVzLmxlbmd0aCkge1xuICAgIHJldHVybiBvZihudWxsKTtcbiAgfVxuXG4gIHJldHVybiBmb3JrSm9pbihzdG9yZXMubWFwKGxheWVycyA9PiBzZXR1cExheWVycyhyeElEQlVwZ3JhZGUsIGxheWVycykpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldHVwTGF5ZXJzKHJ4SURCVXBncmFkZTogUnhJREJVcGdyYWRlLCBsYXllcnM6IFJ4SURCTGF5ZXJzID0gbmV3IE1hcCgpKTogT2JzZXJ2YWJsZTxhbnk+W10ge1xuICBsZXQgeyBvbGRWZXJzaW9uIH0gPSByeElEQlVwZ3JhZGU7XG4gIGxldCBvYnNlcnZhYmxlczogT2JzZXJ2YWJsZTxhbnk+W10gPSBbb2YodHJ1ZSldO1xuXG4gIGZvciAoY29uc3QgW2xheWVyVmVyc2lvbiwgbGF5ZXJJbnN0YWxsZXJdIG9mIGxheWVycykge1xuICAgIGlmIChvbGRWZXJzaW9uIDwgbGF5ZXJWZXJzaW9uKSB7XG4gICAgICBsZXQgcmVzdWx0ID0gbGF5ZXJJbnN0YWxsZXIocnhJREJVcGdyYWRlKTtcblxuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgb2JzZXJ2YWJsZXMucHVzaChyZXN1bHQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvYnNlcnZhYmxlcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRyb3BEQihkYk5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8dm9pZD4ge1xuICByZXR1cm4gT2JzZXJ2YWJsZS5jcmVhdGUoKG9ic2VydmVyOiBPYnNlcnZlcjx2b2lkPikgPT4ge1xuICAgIGxldCByZXF1ZXN0ID0gaW5kZXhlZERCLmRlbGV0ZURhdGFiYXNlKGRiTmFtZSk7XG5cbiAgICByZXF1ZXN0Lm9uYmxvY2tlZCA9IChlKSA9PiBvYnNlcnZlci5lcnJvcihlKTtcbiAgICByZXF1ZXN0Lm9uc3VjY2VzcyA9ICgpID0+IG9ic2VydmVyLm5leHQodW5kZWZpbmVkKTtcbiAgICByZXF1ZXN0Lm9uZXJyb3IgPSAoZSkgPT4gb2JzZXJ2ZXIuZXJyb3IoZSk7XG4gIH0pLnBpcGUodGFrZSgxKSk7XG59XG5cbmV4cG9ydCBjb25zdCByeGlkYiA9IHsgb3BlbkRCLCBkcm9wREIgfTtcbiIsImltcG9ydCB7IFN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBSZXNvbHZlIHJlcXVlc3QgYXMgYW4gT2JzZXJ2YWJsZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcnhpZnlSZXF1ZXN0KHJlcXVlc3Q6IElEQlJlcXVlc3QpOiBPYnNlcnZhYmxlPGFueT4ge1xuICBsZXQgcmVxdWVzdCQ6IFN1YmplY3Q8YW55PiA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgcmVxdWVzdC5vbmVycm9yICAgPSAoZTogYW55KSA9PiByZXF1ZXN0JC5lcnJvcihlKTtcbiAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZTogYW55KSA9PiByZXF1ZXN0JC5uZXh0KGUpO1xuXG4gIHJldHVybiByZXF1ZXN0JDtcbn1cblxuLyoqXG4gKiBQaXBlIG9wZXJhdG9yIGZvciBleHRyYWN0aW5nIHJlc3VsdCBmcm9tIGlkYiBldmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzdWx0RnJvbUlEQkV2ZW50KHNvdXJjZTogT2JzZXJ2YWJsZTxhbnk+KSB7XG4gIHJldHVybiBzb3VyY2UucGlwZShcbiAgICBtYXAoKGU6IGFueSkgPT4gZS50YXJnZXQucmVzdWx0KVxuICApO1xufVxuIiwiZXhwb3J0ICogZnJvbSAnLi9zcmMvcnhpZGIudHlwZXMnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvcnhpZGItZGInO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvcnhpZGItc3RvcmUnO1xuZXhwb3J0ICogZnJvbSAnLi9zcmMvcnhpZGItdXBncmFkZSc7XG5leHBvcnQgeyBvcGVuREIsIGRyb3BEQiB9IGZyb20gJy4vc3JjL3J4aWRiLXN0YXRpYyc7XG4iXSwic291cmNlUm9vdCI6IiJ9