!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e){t.exports=rxjs/operators},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(0),o=r(6),i=function(){function t(t,e){this.name=t,this._db=e}return t.prototype.clear=function(){var t=this;return this.tx("readwrite").pipe(n.map(function(e){return e.objectStore(t.name)}),n.map(function(t){return t.clear()}),n.switchMap(function(t){return o.rxifyRequest(t)}),n.mapTo(void 0))},t.prototype.delete=function(t){var e=this;return this.tx("readwrite").pipe(n.map(function(t){return t.objectStore(e.name)}),n.map(function(e){return e.delete(t)}),n.switchMap(function(t){return o.rxifyRequest(t)}),n.mapTo(void 0))},t.prototype.get=function(t){var e=this;return this.tx().pipe(n.map(function(t){return t.objectStore(e.name)}),n.map(function(e){return e.get(t)}),n.switchMap(function(t){return o.rxifyRequest(t)}),o.resultFromIDBEvent)},t.prototype.set=function(t,e){var r=this;return this.tx("readwrite").pipe(n.map(function(t){return t.objectStore(r.name)}),n.map(function(r){return r.put(t,e)}),n.switchMap(function(t){return o.rxifyRequest(t)}),n.mapTo(void 0))},t.prototype.tx=function(t){return void 0===t&&(t="readonly"),this._db.tx(this.name,t)},t}();e.RxIDBStore=i},function(t,e){t.exports=rxjs},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r,n){var o=t.call(this,e,r)||this;return o._name=e,o._rxidb=r,o._store=n,o}return o(e,t),e.prototype.createIndex=function(t,e,r){return this._store.createIndex(t,e,r)},e.prototype.fill=function(t){var e=this;return Array.from(t).forEach(function(t){return e._store.put(t)}),this},e}(r(1).RxIDBStore);e.RxIDBUpgradeStore=i;var u=function(){function t(t,e){this._rxidb=t,this._event=e,this.db=e.target.result,this.oldVersion=e.oldVersion,this.version=e.newVersion}return t.prototype.create=function(t,e){var r=this.db.createObjectStore(t,e);return new i(t,this._rxidb,r)},t.prototype.delete=function(t){this.db.deleteObjectStore(t)},t.prototype.has=function(t){return this.db.objectStoreNames.contains(t)},t}();e.RxIDBUpgrade=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(2),o=r(0),i=r(1),u=function(){function t(t){this.idb=t}return t.prototype.close=function(){this.idb.close()},t.prototype.get=function(t){return new i.RxIDBStore(t,this)},t.prototype.tx=function(t,e){var r=this;return void 0===e&&(e="readonly"),n.of(null).pipe(o.map(function(){return r.idb.transaction(t,e)}))},t.prototype.transaction=function(t,e){return void 0===e&&(e="readonly"),this.idb.transaction(t,e)},t}();e.RxIDB=u},function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],r=0;return e?e.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}},o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(e,"__esModule",{value:!0});var i=r(2),u=r(0),c=r(4),a=r(3);function s(t,e,r){var n,o=new i.Subject,s=new i.Subject,p=indexedDB.open(t,e);return p.onerror=function(t){return o.error(t)},p.onblocked=function(t){return o.error(t)},p.onsuccess=function(t){n=n||new c.RxIDB(t.target.result),o.next(n),o.complete(),e===n.idb.version&&(s.next(),s.complete())},p.onupgradeneeded=function(t){n=n||new c.RxIDB(t.target.result),f(new a.RxIDBUpgrade(n,t),r).subscribe(function(){return s.next()},function(t){return s.error(t)},function(){return s.complete()})},i.forkJoin([o,s]).pipe(u.map(function(){return n}))}function f(t,e){return e&&e.length?i.forkJoin(e.map(function(e){return p(t,e)})):i.of(null)}function p(t,e){void 0===e&&(e=new Map);var r,u,c=t.oldVersion,a=[i.of(!0)];try{for(var s=n(e),f=s.next();!f.done;f=s.next()){var p=o(f.value,2),l=p[0],d=p[1];if(c<l){var v=d(t);v instanceof i.Observable&&a.push(v)}}}catch(t){r={error:t}}finally{try{f&&!f.done&&(u=s.return)&&u.call(s)}finally{if(r)throw r.error}}return a}function l(t){return i.Observable.create(function(e){var r=indexedDB.deleteDatabase(t);r.onblocked=function(t){return e.error(t)},r.onsuccess=function(){return e.next(void 0)},r.onerror=function(t){return e.error(t)}}).pipe(u.take(1))}e.openDB=s,e.onUpgradeEnded=f,e.setupLayers=p,e.dropDB=l,e.rxidb={openDB:s,dropDB:l}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(2),o=r(0);e.rxifyRequest=function(t){var e=new n.Subject;return t.onerror=function(t){return e.error(t)},t.onsuccess=function(t){return e.next(t)},e},e.resultFromIDBEvent=function(t){return t.pipe(o.map(function(t){return t.target.result}))}},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(4)),n(r(1)),n(r(3));var o=r(5);e.openDB=o.openDB,e.dropDB=o.dropDB}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,