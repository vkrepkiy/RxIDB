!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:n})},r.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=7)}([function(t,e){t.exports=rxjs/operators},function(t,e){t.exports=rxjs},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=r(0),i=r(6),u=function(){function t(t,e){var r=this;this.name=t,this._db=e,this._update$=new n.Subject,this.update$=this._update$.asObservable(),this.data$=n.merge(this.getAll(),this._update$.pipe(o.switchMap(function(){return r.getAll()}))).pipe(o.shareReplay(1))}return t.prototype.clear=function(){var t=this;return this.tx("readwrite").pipe(o.map(function(e){return e.objectStore(t.name)}),o.map(function(t){return t.clear()}),o.switchMap(function(t){return i.rxifyRequest(t)}),o.tap(function(){return t._triggerUpdate()}),o.mapTo(void 0))},t.prototype.cursor=function(t,e,r){var n=this;return void 0===t&&(t="readonly"),this.tx(t).pipe(o.map(function(t){return t.objectStore(n.name)}),o.map(function(t){return t.openCursor(e,r)}),o.switchMap(function(t){return i.rxifyRequest(t)}),i.resultFromIDBEvent)},t.prototype.delete=function(t){var e=this;return this.tx("readwrite").pipe(o.map(function(t){return t.objectStore(e.name)}),o.map(function(e){return e.delete(t)}),o.switchMap(function(t){return i.rxifyRequest(t)}),o.tap(function(){return e._triggerUpdate()}),o.mapTo(void 0))},t.prototype.reset=function(t){var e=this;return this.tx("readwrite").pipe(o.map(function(t){return t.objectStore(e.name)}),o.switchMap(function(t){return i.rxifyRequest(t.clear()).pipe(o.take(1),o.mapTo(t))}),o.map(function(e){return t.map(function(t){return i.rxifyRequest(e.put(t)).pipe(o.take(1),i.resultFromIDBEvent)})}),o.switchMap(function(t){return n.forkJoin(t)}),o.tap(function(){return e._triggerUpdate()}))},t.prototype.get=function(t){var e=this;return this.tx().pipe(o.map(function(t){return t.objectStore(e.name)}),o.map(function(e){return e.get(t)}),o.switchMap(function(t){return i.rxifyRequest(t)}),i.resultFromIDBEvent)},t.prototype.getAll=function(){var t=this.cursor(),e=new n.Subject;return t.pipe(o.tap(function(t){return t?t.continue():e.next()}),o.filter(function(t){return!!t}),o.map(function(t){return t.value}),o.bufferWhen(function(){return e}),o.take(1))},t.prototype.set=function(t,e){var r=this;return this.tx("readwrite").pipe(o.map(function(t){return t.objectStore(r.name)}),o.map(function(r){return r.put(t,e)}),o.switchMap(function(t){return i.rxifyRequest(t)}),o.tap(function(){return r._triggerUpdate()}),i.resultFromIDBEvent)},t.prototype.tx=function(t){return void 0===t&&(t="readonly"),this._db.tx(this.name,t)},t.prototype._triggerUpdate=function(){this._update$.next()},t}();e.RxIDBStore=u},function(t,e,r){"use strict";var n,o=this&&this.__extends||(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])},function(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)});Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(e,r,n){var o=t.call(this,e,r)||this;return o._store=n,o}return o(e,t),e.prototype.createIndex=function(t,e,r){return this._store.createIndex(t,e,r)},e.prototype.fill=function(t){var e=this;return Array.from(t).forEach(function(t){return e._store.put(t)}),this},e}(r(2).RxIDBStore);e.RxIDBUpgradeStore=i;var u=function(){function t(t,e){this._rxidb=t,this.db=e.target.result,this.oldVersion=e.oldVersion,this.version=e.newVersion}return t.prototype.create=function(t,e){var r=this.db.createObjectStore(t,e);return new i(t,this._rxidb,r)},t.prototype.delete=function(t){this.db.deleteObjectStore(t)},t.prototype.has=function(t){return this.db.objectStoreNames.contains(t)},t}();e.RxIDBUpgrade=u},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=r(0),i=r(2),u=function(){function t(t){this.idb=t,this._storeCache={}}return t.prototype.close=function(){this.idb.close()},t.prototype.get=function(t){return this._storeCache[t]?this._storeCache[t]:this._storeCache[t]=new i.RxIDBStore(t,this)},t.prototype.tx=function(t,e){var r=this;return void 0===e&&(e="readonly"),n.of(null).pipe(o.map(function(){return r.idb.transaction(t,e)}))},t.prototype.transaction=function(t,e){return void 0===e&&(e="readonly"),this.idb.transaction(t,e)},t}();e.RxIDB=u},function(t,e,r){"use strict";var n=this&&this.__values||function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],r=0;return e?e.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}},o=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)u.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return u};Object.defineProperty(e,"__esModule",{value:!0});var i=r(1),u=r(0),c=r(4),a=r(3);function p(t,e,r){var n,o=new i.Subject,p=new i.Subject,f=indexedDB.open(t,e);return f.onerror=function(t){return o.error(t)},f.onblocked=function(t){return o.error(t)},f.onsuccess=function(t){n=n||new c.RxIDB(t.target.result),o.next(n),o.complete(),e===n.idb.version&&(p.next(),p.complete())},f.onupgradeneeded=function(t){n=n||new c.RxIDB(t.target.result),s(new a.RxIDBUpgrade(n,t),r).subscribe(function(){return p.next()},function(t){return p.error(t)},function(){return p.complete()})},i.forkJoin([o,p]).pipe(u.map(function(){return n}))}function s(t,e){return e&&e.length?i.forkJoin(e.map(function(e){return f(t,e)})):i.of(null)}function f(t,e){var r,u;void 0===e&&(e=new Map);var c=t.oldVersion,a=[i.of(!0)];try{for(var p=n(e),s=p.next();!s.done;s=p.next()){var f=o(s.value,2),l=f[0],d=f[1];if(c<l){var h=d(t);h instanceof i.Observable&&a.push(h)}}}catch(t){r={error:t}}finally{try{s&&!s.done&&(u=p.return)&&u.call(p)}finally{if(r)throw r.error}}return a}function l(t){return i.Observable.create(function(e){var r=indexedDB.deleteDatabase(t);r.onblocked=function(t){return e.error(t)},r.onsuccess=function(){return e.next(void 0)},r.onerror=function(t){return e.error(t)}}).pipe(u.take(1))}e.openDB=p,e.onUpgradeEnded=s,e.setupLayers=f,e.dropDB=l,e.rxidb={openDB:p,dropDB:l}},function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(1),o=r(0);e.rxifyRequest=function(t){var e=new n.Subject;return t.onerror=function(t){return e.error(t)},t.onsuccess=function(t){return e.next(t)},e},e.resultFromIDBEvent=function(t){return t.pipe(o.map(function(t){return t.target.result}))}},function(t,e,r){"use strict";function n(t){for(var r in t)e.hasOwnProperty(r)||(e[r]=t[r])}Object.defineProperty(e,"__esModule",{value:!0}),n(r(4)),n(r(2)),n(r(3));var o=r(5);e.openDB=o.openDB,e.dropDB=o.dropDB}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,